name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # =========================================================================================
  # JOB 1: BUILD, TEST & SCAN
  # This is the main job that validates the entire repository. It ensures everything
  # installs, compiles, passes tests, and is free of critical vulnerabilities.
  # =========================================================================================
  build:
    name: Build, Test & Scan
    runs-on: ubuntu-latest
    # Pinned to specific versions for consistency and speed. Expand matrix if needed.
    strategy:
      fail-fast: false
      matrix:
        node: [22]
        solc: ['0.8.26']
        python: ['3.11']
    timeout-minutes: 20

    steps:
      # ─── 1. SETUP ENVIRONMENT ────────────────────────────────────────────────
      - name: Checkout code (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js w/ Yarn caching
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'yarn'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'

      - name: Install Foundry toolchain
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly # Using nightly for latest features, or pin to a specific version

      - name: Install snarkjs globally
        run: npm install -g snarkjs

      # ─── 2. INSTALL DEPENDENCIES ──────────────────────────────────────────────
      - name: Enable Corepack and Install Node.js dependencies
        run: |
          corepack enable
          yarn install

      - name: Run commitlint
        if: github.event_name == 'pull_request'
        run: npm run commitlint -- --from=origin/main --to=HEAD

      - name: Lint frontend
        run: yarn --cwd packages/frontend lint

      - name: Install Python dependencies
        run: pip install -r packages/backend/requirements.txt

      - name: Install pre-commit
        run: pip install pre-commit

      - name: Run pre-commit checks
        run: pre-commit run --all-files

      # ─── 3. BUILD & COMPILE ──────────────────────────────────────────────────
      - name: Build smart contracts
        run: forge build --use ${{ matrix.solc }}

      - name: Cache PTAU file
        id: cache-ptau
        uses: actions/cache@v4
        with:
          path: pot12_final.ptau
          key: ptau-v1

      - name: Download PTAU file if not cached
        if: steps.cache-ptau.outputs.cache-hit != 'true'
        run: curl -L https://hermez.s3-eu-west-1.amazonaws.com/powersOfTau28_hez_final_12.ptau -o pot12_final.ptau

      - name: Compile Circom circuits (multi-curve)
        run: |
          for curve in bn254 bls12-381; do
            CURVE=$curve python scripts/build_manifest.py
          done
          python scripts/check_manifest.py

      - name: Benchmark proof compression
        run: python scripts/proof_compression_benchmark.py

      - name: Upload compression CSV
        uses: actions/upload-artifact@v4
        with:
          name: proof-compression-${{ matrix.node }}-solc${{ matrix.solc }}
          path: compression.csv

      # ─── 4. TEST & ANALYSIS ──────────────────────────────────────────────────
      - name: Type-check frontend
        # This assumes a root-level script in package.json: "type-check": "yarn --cwd packages/frontend type-check"
        run: yarn type-check

      - name: Type-check backend
        run: mypy packages/backend

      - name: Run unit, fuzz & invariant tests
        run: forge test --use ${{ matrix.solc }}

      - name: Generate gas report
        run: forge test --gas-report --use ${{ matrix.solc }} > gas-report.txt

      - name: Upload gas report artifact
        uses: actions/upload-artifact@v4
        with:
          name: gas-report-ubuntu-node${{ matrix.node }}-solc${{ matrix.solc }}
          path: gas-report.txt

      - name: Generate gas snapshot diff
        if: github.event_name == 'pull_request'
        uses: atarpara/foundry-snapshot-diff@v0.8
        id: gas_diff

      - name: Comment gas delta on PR
        if: github.event_name == 'pull_request' && steps.gas_diff.outputs.markdown
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: ${{ steps.gas_diff.outputs.markdown }}

      # ─── 5. SECURITY SCANS ──────────────────────────────────────────────────
      - name: Build Docker image for scanning
        run: docker build -t my-app-image .

      - name: Scan for secrets
        uses: gitleaks/gitleaks-action@v2
        with:
          fail: true

      - name: Trivy scan (fail on high/critical)
        uses: aquasecurity/trivy-action@v0.30.0
        with:
          image-ref: 'my-app-image'
          exit-code: '1'
          severity: 'HIGH,CRITICAL'

      - name: Upload full Trivy scan to GitHub Security
        uses: aquasecurity/trivy-action@v0.30.0
        with:
          image-ref: 'my-app-image'
          format: 'sarif'
          output: 'trivy.sarif'
          exit-code: '0'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy.sarif'
          category: trivy

  # =========================================================================================
  # JOB 2: SMOKE TEST
  # Runs after a successful build. Sets up a live environment with services
  # and runs an end-to-end test script to ensure system integration.
  # =========================================================================================
  smoke:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: build
    services:
      anvil:
        image: ghcr.io/foundry-rs/foundry:latest
        ports: ['8545:8545']
        command: ["anvil", "--host", "0.0.0.0", "-m", "test test test test test test test test test test test junk", "--silent"]
      redis:
        image: redis:7-alpine
        ports: ['6379:6379']
      db:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: pass
        ports: ['5432:5432']
      solana:
        image: solanalabs/solana:v1.18.3
        command: ["solana-test-validator", "--quiet"]
        ports: ['8899:8899']
    steps:
      - uses: actions/checkout@v4
        with: { submodules: recursive }
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - uses: foundry-rs/foundry-toolchain@v1
      - name: Install Python dependencies
        run: pip install -r packages/backend/requirements.txt
      - name: Deploy factory
        run: |
          forge script script/DeployFactory.s.sol:DeployFactory \
            --rpc-url http://localhost:8545 \
            --private-key 0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80 \
            --broadcast -q
          echo "FACTORY_ADDRESS=$(jq -r '.transactions[-1].contractAddress' broadcast/DeployFactory.s.sol/31337/run-latest.json)" >> $GITHUB_ENV
      - name: Start backend in background
        run: |
          uvicorn packages.backend.main:app --host 0.0.0.0 --port 8000 &
          echo $! > backend.pid
      - name: Wait for backend to be healthy
        run: |
          timeout 30s bash -c 'until curl -s http://localhost:8000/api/gas > /dev/null; do echo "Waiting for backend..."; sleep 2; done'
          echo "Backend is up!"
      - name: Run smoke test script
        run: |
          BACKEND=http://localhost:8000 FACTORY_ADDRESS=$FACTORY_ADDRESS \
          python3 scripts/smoke_auth_to_mint.py
      - name: Stop backend
        if: always()
        run: kill $(cat backend.pid)

  smoke-testnet:
    name: Smoke Testnet
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with: { submodules: recursive }
      - uses: foundry-rs/foundry-toolchain@v1
      - name: Deploy to testnet
        env:
          RPC: ${{ secrets.TESTNET_RPC_URL }}
          KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
        run: |
          forge script script/DeployFactory.s.sol:DeployFactory \
            --rpc-url "$RPC" --private-key "$KEY" --broadcast -q
          echo "Deployed on testnet"

  health:
    name: Docker Compose Health Check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with: { submodules: recursive }
      - name: Run health check
        run: bash scripts/health_check.sh

  # =========================================================================================
  # JOB 3: COVERAGE
  # Runs after a successful build to calculate test coverage and upload the report.
  # =========================================================================================
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with: { submodules: recursive }
      - uses: foundry-rs/foundry-toolchain@v1
      - name: Run forge coverage
        run: forge coverage --lcov > coverage.lcov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.lcov

  # =========================================================================================
  # JOB 4: VISUAL REGRESSION
  # Runs on PRs after a successful build to check for unintended visual changes.
  # =========================================================================================
  visual:
    name: Visual Regression
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'
      - name: Install frontend dependencies
        run: |
          corepack enable
          yarn install
      - name: Build frontend
        run: yarn --cwd packages/frontend build
      - name: Percy visual regression check
        uses: percy/cli-action@v1
        with:
          token: ${{ secrets.PERCY_TOKEN }}
          command: percy snapshot packages/frontend --allowed-diff-percentage=0.1
