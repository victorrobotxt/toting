#!/bin/bash
set -eo pipefail

# --- Pre-flight Check: Ensure running inside container ---
if [ ! -d "/app" ] || [ ! -f "/app/foundry.toml" ]; then
    echo "🛑 Error: This script must be run from a Docker container with the project root mounted at /app." >&2
    exit 1
fi

# --- Pre-flight Check: Submodules ---
if [ ! -d "/app/lib/openzeppelin-contracts/contracts" ]; then
    echo "🛑 Error: Git submodules not found in /app/lib/. The Docker volume mount seems to be stale or empty." >&2
    echo "This is common on Docker Desktop for Windows/Mac." >&2
    echo "1. Run 'git submodule update --init --recursive' on your host machine." >&2
    echo "2. Run 'docker-compose down -v' to remove the old container and its volume." >&2
    echo "3. Run 'docker-compose up -d --build' to create a fresh one." >&2
    exit 1
fi

if [ ! -f /app/.env ]; then
    echo "🛑 .env file not found inside the container at /app/.env. Please copy .env.example to .env on your host."
    exit 1
fi

export $(grep -v '^#' /app/.env | xargs)

# Define the RPC URL for the Anvil service
RPC_URL="http://anvil:8545"

# --- Wait for Anvil to be ready ---
echo "⏳ Waiting for Anvil RPC at $RPC_URL..."
retries=0
max_retries=60
until cast block-number --rpc-url "$RPC_URL" > /dev/null 2>&1; do
    retries=$((retries+1))
    if [ "$retries" -ge "$max_retries" ]; then
        echo "🛑 Anvil not ready after $max_retries seconds. Exiting."
        exit 1
    fi
    sleep 1
done
echo "✅ Anvil RPC is ready."

echo "📦 Deploying contracts..."

MGR_ADDR=$(forge script script/DeployElectionManagerV2.s.sol:DeployElectionManagerV2Script --rpc-url "$RPC_URL" --broadcast --sig "run() returns (address)" | grep "ElectionManagerV2 proxy deployed to:" | awk '{print $NF}')
if [ -z "$MGR_ADDR" ]; then
    echo "🛑 Failed to deploy ElectionManagerV2."
    exit 1
fi
echo "✅ ElectionManagerV2 proxy deployed at: $MGR_ADDR"

FACTORY_ADDR=$(forge script script/DeployFactory.s.sol:DeployFactory --rpc-url "$RPC_URL" --broadcast | grep "Factory deployed at:" | awk '{print $NF}')
if [ -z "$FACTORY_ADDR" ]; then
    echo "🛑 Failed to deploy WalletFactory."
    exit 1
fi
echo "✅ WalletFactory deployed at: $FACTORY_ADDR"

ENV_FILE="/app/.env.deployed"
echo "📝 Generating environment file at $ENV_FILE"

echo "ELECTION_MANAGER=$MGR_ADDR" > $ENV_FILE
echo "NEXT_PUBLIC_ELECTION_MANAGER=$MGR_ADDR" >> $ENV_FILE
echo "NEXT_PUBLIC_WALLET_FACTORY=$FACTORY_ADDR" >> $ENV_FILE
echo "NEXT_PUBLIC_ENTRYPOINT=0x0000000000000000000000000000000000000000" >> $ENV_FILE

# FIX: Automatically generate the .env.local file for the frontend
# This ensures that when running `yarn dev` on the host, it uses the
# contract addresses from this specific `docker-compose` session.
FRONTEND_LOCAL_ENV_FILE="/app/packages/frontend/.env.local"
echo "📝 Generating/updating frontend local environment file at $FRONTEND_LOCAL_ENV_FILE for hot-reloading..."

{
    echo "# This file is auto-generated by setup_env.sh for local development."
    echo "# Do not commit this file to version control."
    echo "NEXT_PUBLIC_API_BASE=http://localhost:8000"
    echo "NEXT_PUBLIC_BUNDLER_URL=http://localhost:3001"
    echo "NEXT_PUBLIC_ELECTION_MANAGER=$MGR_ADDR"
    echo "NEXT_PUBLIC_WALLET_FACTORY=$FACTORY_ADDR"
    echo "NEXT_PUBLIC_ENTRYPOINT=0x0000000000000000000000000000000000000000"
} > "$FRONTEND_LOCAL_ENV_FILE"
echo "✅ Frontend .env.local created."


echo "🎉 Setup complete. You can now run other services."
