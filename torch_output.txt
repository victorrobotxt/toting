// Path: packages/frontend/src/components/AccountMenu.tsx
```tsx
import { useState } from 'react';
import { useAuth } from '../lib/AuthProvider';
import ThemeToggle from './ThemeToggle';
import { useI18n } from '../lib/I18nProvider';
import RoleSwitchModal from './RoleSwitchModal';
export default function AccountMenu() {
```

// Path: packages/frontend/src/components/AuthChip.tsx
```tsx
import { useAuth } from '../lib/AuthProvider';
export default function AuthChip() {
```

// Path: packages/frontend/src/components/Forbidden.tsx
```tsx
import React from 'react';
export default function Forbidden() {
```

// Path: packages/frontend/src/components/HelpTip.tsx
```tsx
import Tippy from 'tippy.js';
import 'tippy.js/dist/tippy.css';
import { useEffect, useRef } from 'react';
export default function HelpTip({ content }: { content: string }) {
```

// Path: packages/frontend/src/components/NavBar.tsx
```tsx
import Link from 'next/link';
import { useState } from 'react';
import { useAuth } from '../lib/AuthProvider';
import ThemeToggle from './ThemeToggle';
import AuthChip from './AuthChip';
import AccountMenu from './AccountMenu';
export default function NavBar() {
```

// Path: packages/frontend/src/components/RoleSwitchModal.tsx
```tsx
import { useState, useEffect, useRef } from 'react';
import { useAuth } from '../lib/AuthProvider';
import { useToast } from '../lib/ToastProvider';
import { useI18n } from '../lib/I18nProvider';
import { apiUrl } from '../lib/api';
export default function RoleSwitchModal({ onClose }: { onClose: () => void }) {
```

// Path: packages/frontend/src/components/Skeleton.tsx
```tsx
import React from 'react';
export default function Skeleton({ width, height, className = '', style }: SkeletonProps) {
```

// Path: packages/frontend/src/components/ThemeToggle.tsx
```tsx
import { Switch } from '@headlessui/react';
import { useTheme } from 'next-themes';
import { useEffect, useState } from 'react';
export default function ThemeToggle() {
```

// Path: packages/frontend/src/components/withAuth.tsx
```tsx
import { useRouter } from 'next/router';
import { useAuth, Role } from '../lib/AuthProvider';
import Forbidden from './Forbidden';
export default function withAuth(
```

// Path: packages/frontend/src/components/ZeroState.tsx
```tsx
import React from 'react';
export function NoElections() {
export function NotEligible() {
export function NoProofs() {

export function NotEligible() {
  return (
    <div style={{textAlign:'center', padding:'2rem'}}>
      <svg width="120" height="80" role="img" aria-label="not eligible illustration">
        <circle cx="60" cy="40" r="40" fill="#e5e7eb" />
        <line x1="20" y1="20" x2="100" y2="60" stroke="red" strokeWidth="8" />
      </svg>
      <p>Not eligible</p>
    </div>
  );
}

export function NoElections() {
  return (
    <div style={{textAlign:'center', padding:'2rem'}}>
      <svg width="120" height="80" role="img" aria-label="no elections illustration">
        <circle cx="40" cy="40" r="40" fill="#e5e7eb" />
        <rect x="80" y="10" width="30" height="60" fill="#e5e7eb" />
      </svg>
      <p>No elections yet</p>
    </div>
  );
}
```

// Path: packages/frontend/src/contracts/ElectionManagerV2.json
```json
{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createElection","inputs":[{"name":"meta","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"elections","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"start","type":"uint128","internalType":"uint128"},{"name":"end","type":"uint128","internalType":"uint128"}],"stateMutability":"view"},{"type":"function","name":"enqueueMessage","inputs":[{"name":"id","type":"uint256","internalType":"uint256"},{"name":"vote","type":"uint256","internalType":"uint256"},{"name":"nonce","type":"uint256","internalType":"uint256"},{"name":"vcProof","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"initialize","inputs":[{"name":"_maci","type":"address","internalType":"contract IMACI"},{"name":"initialOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"maci","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract IMACI"}],"stateMutability":"view"},{"type":"function","name":"nextId","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"proxiableUUID","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"result","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"tallied","inputs":[],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"tallies","inputs":[{"name":"","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"tallied","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"tallyVerifier","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract TallyVerifier"}],"stateMutability":"view"},{"type":"function","name":"tallyVotes","inputs":[{"name":"id","type":"uint256","internalType":"uint256"},{"name":"a","type":"uint256[2]","internalType":"uint256[2]"},{"name":"b","type":"uint256[2][2]","internalType":"uint256[2][2]"},{"name":"c","type":"uint256[2]","internalType":"uint256[2]"},{"name":"pubSignals","type":"uint256[7]","internalType":"uint256[7]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"upgradeTo","inputs":[{"name":"newImplementation","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"upgradeToAndCall","inputs":[{"name":"newImplementation","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"event","name":"AdminChanged","inputs":[{"name":"previousAdmin","type":"address","indexed":false,"internalType":"address"},{"name":"newAdmin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"BeaconUpgraded","inputs":[{"name":"beacon","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ElectionCreated","inputs":[{"name":"id","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"meta","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint8","indexed":false,"internalType":"uint8"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Tally","inputs":[{"name":"id","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"A","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"B","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"}],"anonymous":false}],"bytecode":{"object":"0x60a080604052346100da57306080525f549060ff8260081c16610088575060ff8082160361004e575b6040516119df90816100df82396080518181816106d60152818161084e0152610e970152f35b60ff90811916175f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a15f610028565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b5f80fdfe60806040818152600480361015610014575f80fd5b5f925f3560e01c908163178e10ca1461144b575080631a32b237146114015780632b8b8ddf1461111c57806334a0922c146110ca5780633659cfe614610e435780633c59405914610dfa578063485cc95514610b565780634f1ef286146107a757806352d1902d146106905780635e6fef011461063257806361b8ce8c146105f65780637cb85bf8146103ab5780638da5cb5b146103575780639aec686714610220578063aa7f0869146101c95763f2fde38b146100d0575f80fd5b346101c55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c55761010761148b565b9173ffffffffffffffffffffffffffffffffffffffff61012e81865460101c16331461158e565b831615610142578361013f84611765565b80f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50503461021c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021c5760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b5080fd5b5082903461021c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021c5761027773ffffffffffffffffffffffffffffffffffffffff835460101c16331461158e565b6fffffffffffffffffffffffffffffffff92620f424043019384431161032b57600193948251916102a7836114ae565b804316835280602084019216825260055487526003602052838720925116867fffffffffffffffffffffffffffffffff000000000000000000000000000000008454935160801b169216171790557fe2363988d6ce7eff8c526836fec08ee2162d5dd2ce672d06748c6dde5bf9986a60206005549384935190358152a20160055580f35b6024846011857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50503461021c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021c5773ffffffffffffffffffffffffffffffffffffffff6020925460101c169051908152f35b50903461058b5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5760249167ffffffffffffffff60643581811161058b573660238201121561058b57808301359082821161058b573686838301011161058b5783355f5260036020526020855f2086519061042e826114ae565b54906fffffffffffffffffffffffffffffffff82169182825260801c928391015243101590816105eb575b501561058f57906104eb60c0879594937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f73ffffffffffffffffffffffffffffffffffffffff6001541695808b519c8d953360208801528d82359088015260443560608801526080808801528260a088015201868601375f858286010152011681010360a0810189520187611513565b803b1561058b576105345f9691879287519889809481937fce29e0af00000000000000000000000000000000000000000000000000000000835260208a8401528a830190611709565b03925af1801561058157610546578580f35b909192938095501161055757505052005b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b84513d5f823e3d90fd5b5f80fd5b60648460068860208951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f636c6f73656400000000000000000000000000000000000000000000000000006044820152fd5b90504311155f610459565b823461058b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b576020906005549051908152f35b503461058b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b57355f526003602052805f20548151906fffffffffffffffffffffffffffffffff8116825260801c6020820152f35b503461058b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361072557602082517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b50817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b576107d961148b565b906024359267ffffffffffffffff841161058b573660238501121561058b57838201359061080682611554565b61081282519182611513565b82815260209283820196366024838301011161058b57815f9260248793018a378301015273ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169061087b823014156115f3565b6108aa7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc92828454161461167e565b6108bb815f5460101c16331461158e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108f7575050505050506108f591506117ed565b005b869293949596169084517f52d1902d00000000000000000000000000000000000000000000000000000000815286818981865afa5f9181610b27575b506109ba57608488888851917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b969192939603610aa557506109ce826117ed565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2835115801590610a9d575b610a0357005b5f806108f596845196610a15886114f7565b602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c878901527f206661696c656400000000000000000000000000000000000000000000000000868901525190845af4913d15610a93573d610a85610a7c82611554565b92519283611513565b81525f81943d92013e6118d9565b50606092506118d9565b5060016109fd565b608490858551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508781813d8311610b4f575b610b3f8183611513565b8101031261058b5751908a610933565b503d610b35565b503461058b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b57803573ffffffffffffffffffffffffffffffffffffffff80821680920361058b57602435908116810361058b575f549260ff8460081c161593848095610ded575b8015610dd6575b15610d53578460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008316175f55610d25575b5060ff5f5460081c1615610ca25750610c1890611765565b7fffffffffffffffffffffffff00000000000000000000000000000000000000009081600154161760015560025416600255610c5057005b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff5f54165f555160018152a1005b60849060208651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101175f5585610c00565b60848260208851917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b158015610bcd5750600160ff821614610bcd565b50600160ff821610610bc6565b503461058b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b573590600282101561058b57602091600601549051908152f35b503461058b57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b57610e7d61148b565b9173ffffffffffffffffffffffffffffffffffffffff93847f000000000000000000000000000000000000000000000000000000000000000016610ec3813014156115f3565b610ef27f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91878354161461167e565b610f03865f5460101c16331461158e565b8151908382019682881067ffffffffffffffff89111761109e578784525f83527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610f5d575050505050506108f591506117ed565b869293949596169084517f52d1902d00000000000000000000000000000000000000000000000000000000815286818981865afa5f918161106f575b5061102057608488888851917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b969192939603610aa55750611034826117ed565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a283511580159061106857610a0357005b505f6109fd565b9091508781813d8311611097575b6110878183611513565b8101031261058b5751908a610f99565b503d61107d565b6041867f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b823461058b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b503461058b576102007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5780353660641161058b573660e41161058b576101249036821161058b57366102041161058b5773ffffffffffffffffffffffffffffffffffffffff9161119a835f5460101c16331461158e565b815f5260209284845260ff865f2054166113a45783600291600254169187519283917fc894e7570000000000000000000000000000000000000000000000000000000083528960248a8501375f60648b604486015b848410611384575090508492506101e493915060e460c484013760e0876101048401375afa90811561137a575f91611344575b50156112e8577fe455590a10a592942106a7101b113b909a9750dcb045d140c8fafc2ffb6e573985839235806006556101443580600755845f52878752806002845f208460018201550155825191825286820152a25f52525f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff60025416176002555f80f35b505060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601360248201527f696e76616c69642074616c6c792070726f6f66000000000000000000000000006044820152fd5b90508381813d8311611373575b61135b8183611513565b8101031261058b5751801515810361058b5786611222565b503d611351565b86513d5f823e3d90fd5b60019395975082949650818093823701920192018894928b8795936111ef565b50505060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600f60248201527f616c72656164792074616c6c69656400000000000000000000000000000000006044820152fd5b50903461058b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5781602092355f52825260ff815f20541690519015158152f35b3461058b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5760209060ff60025460a01c1615158152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361058b57565b6040810190811067ffffffffffffffff8211176114ca57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6060810190811067ffffffffffffffff8211176114ca57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176114ca57604052565b67ffffffffffffffff81116114ca57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b1561159557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156115fa57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561168557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b91908251928382525f5b8481106117515750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6020809697860101520116010190565b602081830181015184830182015201611713565b5f549073ffffffffffffffffffffffffffffffffffffffff8175ffffffffffffffffffffffffffffffffffffffff0000829360101b167fffffffffffffffffffff0000000000000000000000000000000000000000ffff8516175f55169160101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b803b156118555773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b9192901561195457508151156118ed575090565b3b156118f65790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156119675750805190602001fd5b6119a5906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190611709565b0390fdfea2646970667358221220c8f1b67155e058ef92f2365a960d4c5e1b178f1cd0a25f424e72fc7760a0b2c564736f6c63430008180033","sourceMap":"535:2620:1:-:0;;;;;;;1088:4:47;1080:13;;5985::46;535:2620:1;;;;;;;;;;;;;;6056:31:46;6052:139;;-1:-1:-1;535:2620:1;;;;;;;;1080:13:47;535:2620:1;;;;;;;;;;;;;;;;6052:139:46;535:2620:1;;;;;;5985:13:46;535:2620:1;6152:28:46;535:2620:1;;;;;;6152:28:46;6052:139;;;535:2620:1;-1:-1:-1;;;535:2620:1;;;;;;;;;;;;;;;;;-1:-1:-1;;;535:2620:1;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x60806040818152600480361015610014575f80fd5b5f925f3560e01c908163178e10ca1461144b575080631a32b237146114015780632b8b8ddf1461111c57806334a0922c146110ca5780633659cfe614610e435780633c59405914610dfa578063485cc95514610b565780634f1ef286146107a757806352d1902d146106905780635e6fef011461063257806361b8ce8c146105f65780637cb85bf8146103ab5780638da5cb5b146103575780639aec686714610220578063aa7f0869146101c95763f2fde38b146100d0575f80fd5b346101c55760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101c55761010761148b565b9173ffffffffffffffffffffffffffffffffffffffff61012e81865460101c16331461158e565b831615610142578361013f84611765565b80f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50503461021c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021c5760209073ffffffffffffffffffffffffffffffffffffffff600254169051908152f35b5080fd5b5082903461021c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021c5761027773ffffffffffffffffffffffffffffffffffffffff835460101c16331461158e565b6fffffffffffffffffffffffffffffffff92620f424043019384431161032b57600193948251916102a7836114ae565b804316835280602084019216825260055487526003602052838720925116867fffffffffffffffffffffffffffffffff000000000000000000000000000000008454935160801b169216171790557fe2363988d6ce7eff8c526836fec08ee2162d5dd2ce672d06748c6dde5bf9986a60206005549384935190358152a20160055580f35b6024846011857f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50503461021c57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021c5773ffffffffffffffffffffffffffffffffffffffff6020925460101c169051908152f35b50903461058b5760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5760249167ffffffffffffffff60643581811161058b573660238201121561058b57808301359082821161058b573686838301011161058b5783355f5260036020526020855f2086519061042e826114ae565b54906fffffffffffffffffffffffffffffffff82169182825260801c928391015243101590816105eb575b501561058f57906104eb60c0879594937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f73ffffffffffffffffffffffffffffffffffffffff6001541695808b519c8d953360208801528d82359088015260443560608801526080808801528260a088015201868601375f858286010152011681010360a0810189520187611513565b803b1561058b576105345f9691879287519889809481937fce29e0af00000000000000000000000000000000000000000000000000000000835260208a8401528a830190611709565b03925af1801561058157610546578580f35b909192938095501161055757505052005b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b84513d5f823e3d90fd5b5f80fd5b60648460068860208951937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f636c6f73656400000000000000000000000000000000000000000000000000006044820152fd5b90504311155f610459565b823461058b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b576020906005549051908152f35b503461058b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b57355f526003602052805f20548151906fffffffffffffffffffffffffffffffff8116825260801c6020820152f35b503461058b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016300361072557602082517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152fd5b50817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b576107d961148b565b906024359267ffffffffffffffff841161058b573660238501121561058b57838201359061080682611554565b61081282519182611513565b82815260209283820196366024838301011161058b57815f9260248793018a378301015273ffffffffffffffffffffffffffffffffffffffff807f0000000000000000000000000000000000000000000000000000000000000000169061087b823014156115f3565b6108aa7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc92828454161461167e565b6108bb815f5460101c16331461158e565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156108f7575050505050506108f591506117ed565b005b869293949596169084517f52d1902d00000000000000000000000000000000000000000000000000000000815286818981865afa5f9181610b27575b506109ba57608488888851917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b969192939603610aa557506109ce826117ed565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2835115801590610a9d575b610a0357005b5f806108f596845196610a15886114f7565b602788527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c878901527f206661696c656400000000000000000000000000000000000000000000000000868901525190845af4913d15610a93573d610a85610a7c82611554565b92519283611513565b81525f81943d92013e6118d9565b50606092506118d9565b5060016109fd565b608490858551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c655555494400000000000000000000000000000000000000000000006064820152fd5b9091508781813d8311610b4f575b610b3f8183611513565b8101031261058b5751908a610933565b503d610b35565b503461058b57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b57803573ffffffffffffffffffffffffffffffffffffffff80821680920361058b57602435908116810361058b575f549260ff8460081c161593848095610ded575b8015610dd6575b15610d53578460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008316175f55610d25575b5060ff5f5460081c1615610ca25750610c1890611765565b7fffffffffffffffffffffffff00000000000000000000000000000000000000009081600154161760015560025416600255610c5057005b60207f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff5f54165f555160018152a1005b60849060208651917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000016610101175f5585610c00565b60848260208851917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b158015610bcd5750600160ff821614610bcd565b50600160ff821610610bc6565b503461058b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b573590600282101561058b57602091600601549051908152f35b503461058b57602090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b57610e7d61148b565b9173ffffffffffffffffffffffffffffffffffffffff93847f000000000000000000000000000000000000000000000000000000000000000016610ec3813014156115f3565b610ef27f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91878354161461167e565b610f03865f5460101c16331461158e565b8151908382019682881067ffffffffffffffff89111761109e578784525f83527f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610f5d575050505050506108f591506117ed565b869293949596169084517f52d1902d00000000000000000000000000000000000000000000000000000000815286818981865afa5f918161106f575b5061102057608488888851917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f7420555550530000000000000000000000000000000000006064820152fd5b969192939603610aa55750611034826117ed565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a283511580159061106857610a0357005b505f6109fd565b9091508781813d8311611097575b6110878183611513565b8101031261058b5751908a610f99565b503d61107d565b6041867f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b823461058b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5760209073ffffffffffffffffffffffffffffffffffffffff600154169051908152f35b503461058b576102007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5780353660641161058b573660e41161058b576101249036821161058b57366102041161058b5773ffffffffffffffffffffffffffffffffffffffff9161119a835f5460101c16331461158e565b815f5260209284845260ff865f2054166113a45783600291600254169187519283917fc894e7570000000000000000000000000000000000000000000000000000000083528960248a8501375f60648b604486015b848410611384575090508492506101e493915060e460c484013760e0876101048401375afa90811561137a575f91611344575b50156112e8577fe455590a10a592942106a7101b113b909a9750dcb045d140c8fafc2ffb6e573985839235806006556101443580600755845f52878752806002845f208460018201550155825191825286820152a25f52525f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055740100000000000000000000000000000000000000007fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff60025416176002555f80f35b505060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601360248201527f696e76616c69642074616c6c792070726f6f66000000000000000000000000006044820152fd5b90508381813d8311611373575b61135b8183611513565b8101031261058b5751801515810361058b5786611222565b503d611351565b86513d5f823e3d90fd5b60019395975082949650818093823701920192018894928b8795936111ef565b50505060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152600f60248201527f616c72656164792074616c6c69656400000000000000000000000000000000006044820152fd5b50903461058b5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5781602092355f52825260ff815f20541690519015158152f35b3461058b575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261058b5760209060ff60025460a01c1615158152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361058b57565b6040810190811067ffffffffffffffff8211176114ca57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6060810190811067ffffffffffffffff8211176114ca57604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176114ca57604052565b67ffffffffffffffff81116114ca57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b1561159557565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b156115fa57565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c00000000000000000000000000000000000000006064820152fd5b1561168557565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f787900000000000000000000000000000000000000006064820152fd5b91908251928382525f5b8481106117515750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6020809697860101520116010190565b602081830181015184830182015201611713565b5f549073ffffffffffffffffffffffffffffffffffffffff8175ffffffffffffffffffffffffffffffffffffffff0000829360101b167fffffffffffffffffffff0000000000000000000000000000000000000000ffff8516175f55169160101c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3565b803b156118555773ffffffffffffffffffffffffffffffffffffffff7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc91167fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b9192901561195457508151156118ed575090565b3b156118f65790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b8251909150156119675750805190602001fd5b6119a5906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190611709565b0390fdfea2646970667358221220c8f1b67155e058ef92f2365a960d4c5e1b178f1cd0a25f424e72fc7760a0b2c564736f6c63430008180033","sourceMap":"535:2620:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;523:66:11;535:2620:1;;;;;;542:10:11;531:21;523:66;:::i;:::-;535:2620:1;;792:22:11;535:2620:1;;886:8:11;;;;:::i;:::-;535:2620:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;645:34;535:2620;;;;;;;;;;;;;;;;;;;;;;;;;;523:66:11;535:2620:1;;;;;;542:10:11;531:21;523:66;:::i;:::-;535:2620:1;1773:12;1900:9;1773:12;535:2620;1773:12;;;535:2620;;;;;;;;;;;;:::i;:::-;1773:12;;535:2620;;;1743:177;535:2620;1743:177;;535:2620;;;;1733:6;535:2620;;;1723:9;535:2620;;;;;;;;;;;;;;;;;;;;;;;1935:29;535:2620;1733:6;535:2620;;;;;;;;;1935:29;535:2620;1733:6;535:2620;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1524:9;535:2620;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1555:12;:32;;:66;;;;535:2620;;;;;;2218:44;535:2620;;;;;;;;;;;;;;;2229:10;;;;535:2620;2218:44;;535:2620;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2218:44;535:2620;2218:44;;;;;;;:::i;:::-;2198:65;;;;;535:2620;;;;;;;;2198:65;;;;;;535:2620;2198:65;;535:2620;2198:65;;;535:2620;;;;;;:::i;:::-;2198:65;;;;;;;;;;535:2620;;;2198:65;535:2620;;;;;;;;;;-1:-1:-1;;535:2620:1;;;;;;;;;;;2198:65;535:2620;;;;;;;;;2198:65;535:2620;;;;;;;;;;;;;;;;;;;;;;;;;;;1555:66;:12;;;1591:30;;1555:66;;;535:2620;;;;;;;;;;;;;;1043:21;535:2620;;;;;;;;;;;;;;;;;;;;;;940:45;535:2620;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2089:6:47;535:2620:1;2080:4:47;2072:23;535:2620:1;;;;;1030:66:44;535:2620:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1654:6:47;;535:2620:1;1645:4:47;1629:80;1645:4;;1637:23;;1629:80;:::i;:::-;1719:87;1030:66:44;535:2620:1;;;;;1727:30:47;1719:87;:::i;:::-;523:66:11;535:2620:1;;;;;;542:10:11;531:21;523:66;:::i;:::-;689::44;535:2620:1;;;;;;2993:17:44;;;;;;;;;;:::i;:::-;535:2620:1;2906:504:44;535:2620:1;;;;;;;;;;;3046:52:44;;;;;;;;;535:2620:1;;3046:52:44;;;2906:504;-1:-1:-1;3042:291:44;;689:66;535:2620:1;;;;3262:56:44;;;;;;689:66;;535:2620:1;689:66:44;;535:2620:1;689:66:44;535:2620:1;;;689:66:44;;;;;;3262:56;3042:291;3148:28;;;;;;689:66;;3042:291;1856:17;;;:::i;:::-;1889:27;535:2620:1;1889:27:44;;535:2620:1;;2208:15:44;;;:28;;;3042:291;2204:112;;535:2620:1;2204:112:44;535:2620:1;;7307:69:49;535:2620:1;;;;;;;:::i;:::-;;;;;;;;;;;;;;7265:25:49;;;;;;535:2620:1;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;;;;;;;7307:69:49;:::i;535:2620:1:-;-1:-1:-1;535:2620:1;;-1:-1:-1;7307:69:49;:::i;2208:28:44:-;;3865:4:47;2208:28:44;;689:66;;535:2620:1;;;;689:66:44;;;;;;;;535:2620:1;689:66:44;;535:2620:1;689:66:44;535:2620:1;;;689:66:44;;;;;;;3046:52;;;;;;;;;;;;;;;;;:::i;:::-;;;689:66;;;;;3046:52;;;;;;;;;535:2620:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3290:14:46;3336:34;;;;;;535:2620:1;3335:97:46;;;;535:2620:1;;;;;3529:1:46;535:2620:1;;;;;;3540:65:46;;535:2620:1;;;;;;;;;;;466:12:11;;;;:::i;:::-;535:2620:1;;;3529:1:46;535:2620:1;;;3529:1:46;535:2620:1;1400:41;535:2620;;1400:41;535:2620;3625:99:46;;535:2620:1;3625:99:46;535:2620:1;3699:14:46;535:2620:1;;;;;;;;3529:1:46;535:2620:1;;3699:14:46;535:2620:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3540:65:46;535:2620:1;;;;;;3540:65:46;;;535:2620:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3335:97:46;3404:4;;1702:19:49;:23;3376:55:46;;3335:97;3376:55;535:2620:1;3430:1:46;535:2620:1;;;3414:17:46;3335:97;;3336:34;535:2620:1;3369:1:46;535:2620:1;;;3354:16:46;3336:34;;535:2620:1;;;;;;;;;;;;;1070:24;535:2620;1070:24;;;;;535:2620;;1070:24;535:2620;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1654:6:47;;;535:2620:1;1629:80:47;1645:4;;1637:23;;1629:80;:::i;:::-;1719:87;1030:66:44;535:2620:1;;;;;1727:30:47;1719:87;:::i;:::-;523:66:11;535:2620:1;;;;;;542:10:11;531:21;523:66;:::i;:::-;535:2620:1;;;;;;;;;;;;;;;;;;;;;;689:66:44;535:2620:1;;;;;;2993:17:44;;;;;;;;;;:::i;2906:504::-;535:2620:1;;;;;;;;;;;3046:52:44;;;;;;;;;535:2620:1;;3046:52:44;;;2906:504;-1:-1:-1;3042:291:44;;689:66;535:2620:1;;;;3262:56:44;;;;;;689:66;;;;;535:2620:1;689:66:44;535:2620:1;;;689:66:44;;;;;;3262:56;3042:291;3148:28;;;;;;689:66;;3042:291;1856:17;;;:::i;:::-;1889:27;535:2620:1;1889:27:44;;535:2620:1;;2208:15:44;;;:28;;;2204:112;;535:2620:1;2208:28:44;;535:2620:1;2208:28:44;;3046:52;;;;;;;;;;;;;;;;;:::i;:::-;;;689:66;;;;;3046:52;;;;;;;;;535:2620:1;;;;;;;;;;;;;;;;;;;;;;;;;622:17;535:2620;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;523:66:11;535:2620:1;;;;;;542:10:11;531:21;523:66;:::i;:::-;535:2620:1;;;;;;;;;;;;;;;;2566:13;;535:2620;2566:13;535:2620;;;;;2566:46;;;535:2620;2566:46;;;535:2620;2566:46;;;535:2620;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2566:46;;;;;;;535:2620;2566:46;;;535:2620;;;;;2836:39;535:2620;;;;;;;;;;;;;;;;;;;2566:13;535:2620;;;2737:18;535:2620;2737:18;;535:2620;;;;;;;;;;;;2836:39;535:2620;;;;;;;;;;;;;;;2566:13;535:2620;;;2566:13;535:2620;;;;;;;;;;;;;;;;;;;;;;;;;;;;2566:46;;;;;;;;;;;;;;;;:::i;:::-;;;535:2620;;;;;;;;;;;;2566:46;;;;;;;;;535:2620;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;685:19;535:2620;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;908:187:11;1000:6;535:2620:1;;;;;;;;;;;;;;1000:6:11;535:2620:1;;;;;;1048:40:11;1000:6;1048:40;;908:187::o;1406:259:44:-;1702:19:49;;:23;535:2620:1;;;1030:66:44;535:2620:1;;;;;;;;;1406:259:44:o;535:2620:1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;7671:628:49;;;;7875:418;;;535:2620:1;;;7906:22:49;7902:286;;8201:17;;:::o;7902:286::-;1702:19;:23;535:2620:1;;8201:17:49;:::o;535:2620:1:-;;;;;;;;;;;;;;;;;;;;;;;7875:418:49;535:2620:1;;;;-1:-1:-1;8980:21:49;:17;;9152:142;;;;;;;8976:379;535:2620:1;;;;9324:20:49;;;;;;535:2620:1;9324:20:49;;;535:2620:1;;;;;;:::i;:::-;9324:20:49;;","linkReferences":{},"immutableReferences":{"41394":[{"start":1750,"length":32},{"start":2126,"length":32},{"start":3735,"length":32}]}},"methodIdentifiers":{"createElection(bytes32)":"9aec6867","elections(uint256)":"5e6fef01","enqueueMessage(uint256,uint256,uint256,bytes)":"7cb85bf8","initialize(address,address)":"485cc955","maci()":"34a0922c","nextId()":"61b8ce8c","owner()":"8da5cb5b","proxiableUUID()":"52d1902d","result(uint256)":"3c594059","tallied()":"178e10ca","tallies(uint256)":"1a32b237","tallyVerifier()":"aa7f0869","tallyVotes(uint256,uint256[2],uint256[2][2],uint256[2],uint256[7])":"2b8b8ddf","transferOwnership(address)":"f2fde38b","upgradeTo(address)":"3659cfe6","upgradeToAndCall(address,bytes)":"4f1ef286"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"meta\",\"type\":\"bytes32\"}],\"name\":\"ElectionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"A\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"B\",\"type\":\"uint256\"}],\"name\":\"Tally\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"meta\",\"type\":\"bytes32\"}],\"name\":\"createElection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"elections\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"start\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"end\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vote\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"vcProof\",\"type\":\"bytes\"}],\"name\":\"enqueueMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMACI\",\"name\":\"_maci\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maci\",\"outputs\":[{\"internalType\":\"contract IMACI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"result\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tallies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"tallied\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tallyVerifier\",\"outputs\":[{\"internalType\":\"contract TallyVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[7]\",\"name\":\"pubSignals\",\"type\":\"uint256[7]\"}],\"name\":\"tallyVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"initialize(address,address)\":{\"details\":\"initializer replaces constructor for upgradeable contracts\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"stateVariables\":{\"__gap\":{\"custom:storage-gap\":\"\"}},\"title\":\"Upgradeable ElectionManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Version 2 of ElectionManager using UUPS proxy pattern\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ElectionManagerV2.sol\":\"ElectionManagerV2\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[\":@account-abstraction/contracts/=lib/account-abstraction/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts/contracts-upgradeable/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":forge-std/=lib/forge-std/src/\"],\"viaIR\":true},\"sources\":{\"contracts/ElectionManagerV2.sol\":{\"keccak256\":\"0xf0dc0fe915380b78bcd38b73444f2551ea1acac3cf2dbf2c606e2765a5d58102\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://858120925ed0279d77e7b2d17d2a236eb59927cc4bff4230590cecae8151c07c\",\"dweb:/ipfs/QmRx29cEeKtSZBF7DJzFkzyowFx5314LYQXq5mKpynHLVR\"]},\"contracts/TallyVerifier.sol\":{\"keccak256\":\"0xcb0f691c0554a4b34ea80899cacce15ac3b48c02ac4a738529821508f865f422\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://571dfa6096370b83dbe46f87ef5303926424e793d8ad3a420d60d787e3fd0743\",\"dweb:/ipfs/QmZXGGU3v1wvAWuttxA4xKiABTrgf9aDtytfiNtJLmcfk7\"]},\"contracts/Verifier.sol\":{\"keccak256\":\"0x2c9e54661a1ab3ebba0250b2105fa83abccd6d0e537da7efbf0a8c17f6999715\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://e98dec7f9c45f3dce5831af227b16f4f4e6671616aeca33bcef0fa73358d8243\",\"dweb:/ipfs/QmPGEeUfD4EJMGxy6ntp2QzXDNELVXSgpRMcfuSvtxPXzr\"]},\"contracts/interfaces/IMACI.sol\":{\"keccak256\":\"0x94f8c54d526438246363b0f916c3247d19bb9d62e772a5ec7f1eb98a79b5c853\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12f73052a23a23b414e2ff5b7fc1a18289e700d5cbcf066a339473fd61704108\",\"dweb:/ipfs/QmezQudgveTj2uxdqnbXFoDV74ovTpyNeFoU1oit25M53t\"]},\"contracts/utils/OwnableUpgradeable.sol\":{\"keccak256\":\"0x6c8d2969c71044d966bac27c0ccd16932e661e70570f328ceefafd3b2bf088a9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://03940f3e1a6757a09499c89ba1869058daddcad4f5f7a4e54738d137f008f6a3\",\"dweb:/ipfs/QmUJuEHG11Juuxxkh8YjxXZEVYTigdaHcRYbe7ZkySemxN\"]},\"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol\":{\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e8fa670c3bdce78e642cc6ae11c4cb38b133499cdce5e1990a9979d424703263\",\"dweb:/ipfs/QmVxeCUk4jL2pXQyhsoNJwyU874wRufS2WvGe8TgPKPqhE\"]},\"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688\",\"dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr\"]},\"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2db8e18505e86e02526847005d7287a33e397ed7fb9eaba3fd4a4a197add16e2\",\"dweb:/ipfs/QmW9BSuKTzHWHBNSHF4L8XfVuU1uJrP2vLg84YtBd8mL82\"]},\"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://720d6bb56ea0c4ef781c0bd65c5bd0541f5a46100163b2587170f97658d2deed\",\"dweb:/ipfs/QmTS2biLVPrv8CeeXCaKmkFxonMiRvc1LxiYBRYDAJHQUS\"]},\"lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://543be67f7fa43b1b932637c1c7f12035f0f4b0f7ee2bd3c33841186f79c165c1\",\"dweb:/ipfs/QmSBPM2UVKbmJqWfD9i6hSiqbaE8TV4TSqfuiivziRRLKM\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931\",\"dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm\"]},\"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da\",\"dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"previousAdmin","type":"address","indexed":false},{"internalType":"address","name":"newAdmin","type":"address","indexed":false}],"type":"event","name":"AdminChanged","anonymous":false},{"inputs":[{"internalType":"address","name":"beacon","type":"address","indexed":true}],"type":"event","name":"BeaconUpgraded","anonymous":false},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256","indexed":true},{"internalType":"bytes32","name":"meta","type":"bytes32","indexed":false}],"type":"event","name":"ElectionCreated","anonymous":false},{"inputs":[{"internalType":"uint8","name":"version","type":"uint8","indexed":false}],"type":"event","name":"Initialized","anonymous":false},{"inputs":[{"internalType":"address","name":"previousOwner","type":"address","indexed":true},{"internalType":"address","name":"newOwner","type":"address","indexed":true}],"type":"event","name":"OwnershipTransferred","anonymous":false},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256","indexed":true},{"internalType":"uint256","name":"A","type":"uint256","indexed":false},{"internalType":"uint256","name":"B","type":"uint256","indexed":false}],"type":"event","name":"Tally","anonymous":false},{"inputs":[{"internalType":"address","name":"implementation","type":"address","indexed":true}],"type":"event","name":"Upgraded","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"meta","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"createElection"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"elections","outputs":[{"internalType":"uint128","name":"start","type":"uint128"},{"internalType":"uint128","name":"end","type":"uint128"}]},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"vote","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"vcProof","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"enqueueMessage"},{"inputs":[{"internalType":"contract IMACI","name":"_maci","type":"address"},{"internalType":"address","name":"initialOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"initialize"},{"inputs":[],"stateMutability":"view","type":"function","name":"maci","outputs":[{"internalType":"contract IMACI","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"nextId","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"result","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"tallied","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function","name":"tallies","outputs":[{"internalType":"bool","name":"tallied","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"tallyVerifier","outputs":[{"internalType":"contract TallyVerifier","name":"","type":"address"}]},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256[7]","name":"pubSignals","type":"uint256[7]"}],"stateMutability":"nonpayable","type":"function","name":"tallyVotes"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"transferOwnership"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"upgradeTo"},{"inputs":[{"internalType":"address","name":"newImplementation","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"stateMutability":"payable","type":"function","name":"upgradeToAndCall"}],"devdoc":{"kind":"dev","methods":{"initialize(address,address)":{"details":"initializer replaces constructor for upgradeable contracts"},"proxiableUUID()":{"details":"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."},"upgradeTo(address)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."},"upgradeToAndCall(address,bytes)":{"custom:oz-upgrades-unsafe-allow-reachable":"delegatecall","details":"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@account-abstraction/contracts/=lib/account-abstraction/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts/contracts-upgradeable/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","forge-std/=lib/forge-std/src/"],"optimizer":{"enabled":true,"runs":200000},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/ElectionManagerV2.sol":"ElectionManagerV2"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"contracts/ElectionManagerV2.sol":{"keccak256":"0xf0dc0fe915380b78bcd38b73444f2551ea1acac3cf2dbf2c606e2765a5d58102","urls":["bzz-raw://858120925ed0279d77e7b2d17d2a236eb59927cc4bff4230590cecae8151c07c","dweb:/ipfs/QmRx29cEeKtSZBF7DJzFkzyowFx5314LYQXq5mKpynHLVR"],"license":"MIT"},"contracts/TallyVerifier.sol":{"keccak256":"0xcb0f691c0554a4b34ea80899cacce15ac3b48c02ac4a738529821508f865f422","urls":["bzz-raw://571dfa6096370b83dbe46f87ef5303926424e793d8ad3a420d60d787e3fd0743","dweb:/ipfs/QmZXGGU3v1wvAWuttxA4xKiABTrgf9aDtytfiNtJLmcfk7"],"license":"MIT"},"contracts/Verifier.sol":{"keccak256":"0x2c9e54661a1ab3ebba0250b2105fa83abccd6d0e537da7efbf0a8c17f6999715","urls":["bzz-raw://e98dec7f9c45f3dce5831af227b16f4f4e6671616aeca33bcef0fa73358d8243","dweb:/ipfs/QmPGEeUfD4EJMGxy6ntp2QzXDNELVXSgpRMcfuSvtxPXzr"],"license":"GPL-3.0"},"contracts/interfaces/IMACI.sol":{"keccak256":"0x94f8c54d526438246363b0f916c3247d19bb9d62e772a5ec7f1eb98a79b5c853","urls":["bzz-raw://12f73052a23a23b414e2ff5b7fc1a18289e700d5cbcf066a339473fd61704108","dweb:/ipfs/QmezQudgveTj2uxdqnbXFoDV74ovTpyNeFoU1oit25M53t"],"license":"MIT"},"contracts/utils/OwnableUpgradeable.sol":{"keccak256":"0x6c8d2969c71044d966bac27c0ccd16932e661e70570f328ceefafd3b2bf088a9","urls":["bzz-raw://03940f3e1a6757a09499c89ba1869058daddcad4f5f7a4e54738d137f008f6a3","dweb:/ipfs/QmUJuEHG11Juuxxkh8YjxXZEVYTigdaHcRYbe7ZkySemxN"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol":{"keccak256":"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90","urls":["bzz-raw://e8fa670c3bdce78e642cc6ae11c4cb38b133499cdce5e1990a9979d424703263","dweb:/ipfs/QmVxeCUk4jL2pXQyhsoNJwyU874wRufS2WvGe8TgPKPqhE"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol":{"keccak256":"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff","urls":["bzz-raw://383fb7b8181016ac5ccf07bc9cdb7c1b5045ea36e2cc4df52bcbf20396fc7688","dweb:/ipfs/QmYJ7Cg4WmE3rR8KGQxjUCXFfTH6TcwZ2Z1f6tPrq7jHFr"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"keccak256":"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2","urls":["bzz-raw://2db8e18505e86e02526847005d7287a33e397ed7fb9eaba3fd4a4a197add16e2","dweb:/ipfs/QmW9BSuKTzHWHBNSHF4L8XfVuU1uJrP2vLg84YtBd8mL82"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"keccak256":"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61","urls":["bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354","dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/utils/Initializable.sol":{"keccak256":"0x3d6069be9b4c01fb81840fb9c2c4dc58dd6a6a4aafaa2c6837de8699574d84c6","urls":["bzz-raw://720d6bb56ea0c4ef781c0bd65c5bd0541f5a46100163b2587170f97658d2deed","dweb:/ipfs/QmTS2biLVPrv8CeeXCaKmkFxonMiRvc1LxiYBRYDAJHQUS"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/proxy/utils/UUPSUpgradeable.sol":{"keccak256":"0xc6619957bcc6641fe8984bfaf9ff11a9e4b97d8149c0495f608f9a2416d7c5cf","urls":["bzz-raw://543be67f7fa43b1b932637c1c7f12035f0f4b0f7ee2bd3c33841186f79c165c1","dweb:/ipfs/QmSBPM2UVKbmJqWfD9i6hSiqbaE8TV4TSqfuiivziRRLKM"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa","urls":["bzz-raw://2455248c8ddd9cc6a7af76a13973cddf222072427e7b0e2a7d1aff345145e931","dweb:/ipfs/QmfYjnjRbWqYpuxurqveE6HtzsY1Xx323J428AKQgtBJZm"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"keccak256":"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899","urls":["bzz-raw://e26daf81e2252dc1fe1ce0e4b55c2eb7c6d1ee84ae6558d1a9554432ea1d32da","dweb:/ipfs/Qmb1UANWiWq5pCKbmHSu772hd4nt374dVaghGmwSVNuk8Q"],"license":"MIT"}},"version":1},"id":1}
```

// Path: packages/frontend/src/lib/accountAbstraction.ts
```ts
import { ethers, BigNumber, BigNumberish } from "ethers";
import { SimpleAccountAPI } from "@account-abstraction/sdk";
import ElectionManagerV2 from "../contracts/ElectionManagerV2.json";
import { ProofWalletAPI, ZkProof } from "./ProofWalletAPI";
export async function bundleUserOp(
export async function bundleSubmitVote(
```

// Path: packages/frontend/src/lib/api.ts
```ts
export const apiUrl = (path: string): string => {
export const jsonFetcher = async ([url, token]: [string, string?]): Promise<any> => {
export const jsonFetcher = async ([url, token]: [string, string?]): Promise<any> => {
    const fullUrl = url.startsWith('http') ? url : apiUrl(url);

    const headers: HeadersInit = {
        'Content-Type': 'application/json',
    };
    if (token) {
        headers['Authorization'] = `Bearer ${token}`;
    }

    const res = await fetch(fullUrl, { headers });

    if (!res.ok) {
        const error = new Error('An error occurred while fetching the data.');
        // Attach extra info to the error object.
        try {
            const info = await res.json();
            (error as any).info = info;
            error.message = info.detail || res.statusText;
        } catch (e) {
            // The response was not JSON.
            error.message = res.statusText;
        }
        (error as any).status = res.status;
        throw error;
    }

    return res.json();
};
export const apiUrl = (path: string): string => {
    const apiBase = process.env.NEXT_PUBLIC_API_BASE || 'http://localhost:8000';
    return `${apiBase}${path}`;
};
```

// Path: packages/frontend/src/lib/AuthProvider.tsx
```tsx
import React, { createContext, useContext, useState, useEffect, useCallback, ReactNode } from 'react';
import { useRouter } from 'next/router';
import { jwtDecode } from 'jwt-decode';
export type Role = 'admin' | 'user' | 'verifier' | 'guest';
export type AuthMode = 'eid' | 'mock' | 'guest';
export const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
export const useAuth = () => {

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export type Role = 'admin' | 'user' | 'verifier' | 'guest';
export type AuthMode = 'eid' | 'mock' | 'guest';

interface AuthContextType {
  isLoggedIn: boolean;
  token: string | null;
  role: Role;
  eligibility: boolean;
  mode: AuthMode;
  ready: boolean;
  login: (token: string, eligibility: boolean, mode: AuthMode) => void;
  logout: () => void;
  setMode: (mode: AuthMode) => void;
}
```

// Path: packages/frontend/src/lib/I18nProvider.tsx
```tsx
import React, { createContext, useContext, useMemo, ReactNode } from 'react';
import { useRouter } from 'next/router';
import en from '../translations/en.json';
import bg from '../translations/bg.json';
export const I18nProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
export const useI18n = () => {

export const useI18n = () => {
  const context = useContext(I18nContext);
  if (context === undefined) {
    throw new Error('useI18n must be used within an I18nProvider');
  }
  return context;
};
```

// Path: packages/frontend/src/lib/ProofWalletAPI.ts
```ts
import { SimpleAccountAPI } from "@account-abstraction/sdk";
import { ethers } from "ethers";
import { hexConcat } from "ethers/lib/utils";
export type ZkProof = {
export class ProofWalletAPI extends SimpleAccountAPI {
export class ProofWalletAPI extends SimpleAccountAPI {
  zkProof?: ZkProof;
  pubSignals?: string[];
  factoryAddress?: string;

  constructor(params: ProofWalletApiParams) {
    super({
        ...params,
        factoryAddress: params.factoryAddress ?? WALLET_FACTORY_ADDRESS,
    });
    
    this.factoryAddress = params.factoryAddress ?? WALLET_FACTORY_ADDRESS;
    this.zkProof = params.zkProof;
    this.pubSignals = params.pubSignals;
  }

  /**
   * --- THIS IS THE CORE FIX ---
   * We add robust logging before the potentially failing call. This will immediately
   * show you in the browser console if you are using a stale contract address,
   * making this class of error easy to debug in the future. The logic itself
   * remains the same as it correctly follows the custom factory pattern.
   */
  async getAccountAddress(): Promise<string> {
    if (this.accountAddress) {
      return this.accountAddress;
    }
    if (!this.factoryAddress) {
        throw new Error("Factory address is not defined");
    }

    const codeAtFactory = await this.provider.getCode(this.factoryAddress);
    if (codeAtFactory === '0x') {
        const network = await this.provider.getNetwork();
        throw new Error(
            `Factory not deployed at ${this.factoryAddress} on chain ${network.chainId}. ` +
            `Did you run setup_env.sh and restart your dev server? ` +
            `Check that your wallet is connected to the local Anvil network.`
        );
    }

    const factory = new ethers.Contract(this.factoryAddress, FACTORY_ABI, this.provider);
    const ownerAddress = await this.owner.getAddress();
    
    // --- ADDED LOGGING FOR DEBUGGING ---
    console.log(`[ProofWalletAPI] Calling getAddress on factory: ${this.factoryAddress}`);
    console.log(` > Owner: ${ownerAddress}`);
    console.log(` > Salt (index): ${this.index}`);
    // --- END ADDED LOGGING ---

    try {
      // Call the `getAddress` view function on the factory contract.
      // `this.index` is the salt, inherited from the base SimpleAccountAPI.
      this.accountAddress = await factory.getAddress(ownerAddress, this.index);
      console.log(`[ProofWalletAPI] Got predicted address: ${this.accountAddress}`);
      return this.accountAddress!;
    } catch (error: any) {
      // Enhance the error message to be more explicit about the likely cause.
      console.error("Fatal Error: factory.getAddress() call failed.", error);
      const newError = new Error(
        `Factory.getAddress() call failed: ${error.message || 'call revert exception'}. ` +
        `This often means the factory address (${this.factoryAddress}) is wrong or stale. ` +
        `Try a hard refresh (Ctrl+Shift+R) of your browser.`
      );
      (newError as any).cause = error;
      throw newError;
    }
  }

  /**
   * Overrides the base `getAccountInitCode` to work with our custom factory
   * that requires a ZK-proof for wallet creation.
   */
  async getAccountInitCode(): Promise<string> {
    // If the wallet already exists, initCode is empty.
    const code = await this.provider.getCode(await this.getAccountAddress());
    if (code !== '0x') {
        return '0x';
    }
      
    if (!this.zkProof || !this.pubSignals) {
      throw new Error("ProofWalletAPI: ZK proof and public signals are required for the first transaction.");
    }
    if (!this.factoryAddress) {
        throw new Error("ProofWalletAPI: factoryAddress is not defined.");
    }

    const ownerAddress = await this.owner.getAddress();
    
    const innerCreationData = ethers.utils.defaultAbiCoder.encode(
        ['uint256[2]', 'uint256[2][2]', 'uint256[2]', 'uint256[7]', 'address', 'uint256'],
        [
            this.zkProof.a,
            this.zkProof.b,
            this.zkProof.c,
            this.pubSignals,
            ownerAddress,
            this.index // salt
        ]
    );

    const factoryIface = new ethers.utils.Interface(["function createAccount(bytes data)"]);
    const calldata = factoryIface.encodeFunctionData("createAccount", [innerCreationData]);
    const initCode = hexConcat([this.factoryAddress, calldata]);
    console.log(`[ProofWalletAPI] initCode length: ${initCode.length}`);
    return initCode;
  }
}

export type ZkProof = {
  a: [string, string];
  b: [[string, string], [string, string]];
  c: [string, string];
};
```

// Path: packages/frontend/src/lib/ToastProvider.tsx
```tsx
import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
export const ToastProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
export const useToast = () => {

export const useToast = () => {
  const context = useContext(ToastContext);
  if (!context) {
    throw new Error('useToast must be used within a ToastProvider');
  }
  return context;
};
```

// Path: packages/frontend/src/pages/vote.tsx
```tsx
// packages/frontend/src/pages/vote.tsx
import { useState } from "react";
import { ethers } from "ethers";
import { useRouter } from "next/router";
import useSWR from 'swr';
import { bundleSubmitVote } from "../lib/accountAbstraction";
import { ZkProof } from "../lib/ProofWalletAPI"; // Keep this for eligibility proof
import withAuth from "../components/withAuth";
import NavBar from "../components/NavBar";
import Skeleton from "../components/Skeleton";
import { useAuth } from "../lib/AuthProvider";
import { useToast } from "../lib/ToastProvider";
import { NotEligible, NoElections } from "../components/ZeroState";
import HelpTip from "../components/HelpTip";
import { apiUrl, jsonFetcher } from "../lib/api";

// --- Types for API responses ---
// The vote proof from the API is a flat string (hex), not the structured ZkProof object.
type VoteProofResult = {
    proof: string; // This will be a hex string like "0x..."
    pubSignals: string[];
    job_id?: string;
    status?: string;
};

// Eligibility proof IS the structured object
type EligibilityProofResult = {
    proof: ZkProof;
    pubSignals: string[];
    job_id?: string;
    status?: string;
};

// --- Types for our Data ---
interface ElectionOption {
  id: string;
  label: string;
}

interface ElectionMetadata {
  title: string;
  description: string;
  options: ElectionOption[];
}

interface ElectionDetails {
    id: number;
    meta: string; // This is the hash
    status: string;
}

// --- SWR Fetchers ---
// Fetches from our backend API
const apiFetcher = ([url, token]: [string, string?]) => jsonFetcher([url, token]);

// --- FIX: Renamed fetcher for clarity, used for public-accessible URLs ---
const publicJsonFetcher = (url: string) => fetch(url).then(res => {
    if (!res.ok) throw new Error(`Failed to fetch metadata: ${res.statusText}`);
    return res.json();
});


function VotePage() {
    const router = useRouter();
    const { token, eligibility } = useAuth();
    const { showToast } = useToast();
    
    const [receipt, setReceipt] = useState<string>();
    const [loading, setLoading] = useState(false);
    const [statusText, setStatusText] = useState("");
    
    const { id: electionId } = router.query;

    // --- Data Fetching Logic ---
    // 1. Fetch the core election details from our API
    const { 
        data: election, 
        error: electionError 
    } = useSWR<ElectionDetails>(
        (electionId && token) ? [`/elections/${electionId}`, token] : null, 
        apiFetcher
    );
    
    // 2. If the election exists, fetch its metadata from our OWN backend
    // --- THIS IS THE FIX: Use the correct API endpoint for metadata ---
    const { 
        data: metadata, 
        error: metadataError 
    } = useSWR<ElectionMetadata>(
        election ? apiUrl(`/elections/${election.id}/meta`) : null,
        publicJsonFetcher
    );

    // --- Loading and Error Handling ---
    if (!router.isReady) {
        return <><NavBar /><div style={{ padding: '1rem', textAlign: 'center' }}>Loading...</div></>;
    }

    if (electionError) {
        // This handles cases where the electionId is invalid (e.g., /vote?id=10000)
        return <><NavBar /><NoElections /></>;
    }

    // --- Main Action: Cast Vote ---
    const cast = async (optionIndex: number) => {
        if (!electionId || !(window as any).ethereum || !metadata) {
            showToast({ type: 'error', message: 'Required data missing or no wallet detected' });
            return;
        }

        setLoading(true);
        setReceipt("");
        setStatusText("Requesting proofs from server...");

        // Create a one-hot encoded array for the vote credits
        const credits = metadata.options.map((_, index) => (index === optionIndex ? 1 : 0));

        const provider = new ethers.providers.Web3Provider((window as any).ethereum);
        await provider.send("eth_requestAccounts", []);
        const net = await provider.getNetwork();
        console.log(`[vote.tsx] connected chainId: ${net.chainId}`);

        const voicePayload = { credits, nonce: Date.now() };
        const eligibilityPayload = { country: "US", dob: "1990-01-01", residency: "CA" };

        const headers = {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
        };

        try {
            const [voiceRes, eligibilityRes] = await Promise.all([
                fetch(apiUrl('/api/zk/voice'), { method: 'POST', headers, body: JSON.stringify(voicePayload) }),
                fetch(apiUrl('/api/zk/eligibility'), { method: 'POST', headers, body: JSON.stringify(eligibilityPayload) })
            ]);

            if (voiceRes.status === 429 || eligibilityRes.status === 429) throw new Error('Proof quota exceeded');
            if (!voiceRes.ok || !eligibilityRes.ok) throw new Error('Failed to start proof generation');

            const { job_id: voiceJobId } = await voiceRes.json();
            const { job_id: eligibilityJobId } = await eligibilityRes.json();

            setStatusText("Generating ZK proofs... this may take a moment.");
            
            const [voteProofResult, eligibilityProofResult] = await Promise.all([
                pollForResult<VoteProofResult>(`${apiUrl('/api/zk/voice/')}${voiceJobId}`, token),
                pollForResult<EligibilityProofResult>(`${apiUrl('/api/zk/eligibility/')}${eligibilityJobId}`, token)
            ]);
            
            setStatusText("Proofs generated! Please confirm in your wallet...");

            const signer = provider.getSigner();

            // Note: The `bundleSubmitVote` function's second argument `voteOption` is now just for logging/debugging.
            // The actual vote is encoded in the proof, derived from the `credits` array. We'll pass the index.
            const userOpHash = await bundleSubmitVote(
                signer,
                Number(electionId),
                optionIndex,
                voteProofResult.proof,
                voteProofResult.pubSignals,
                eligibilityProofResult.proof,
                eligibilityProofResult.pubSignals
            );

            setReceipt(userOpHash);
            setStatusText("Success! Your UserOperation has been sent to the bundler.");
            showToast({ type: 'success', message: 'Vote submitted successfully!' });

        } catch (err: any) {
            console.error("Voting error:", err);
            const readableError = err.info?.detail || err.message || 'An unknown error occurred';
            showToast({ type: 'error', message: readableError });
            setStatusText("");
        } finally {
            setLoading(false);
        }
    };
    
    return (
        <>
            <NavBar />
            <div style={{ padding: '1rem', maxWidth: '600px', margin: 'auto' }}>
                {!election || !metadata || metadataError ? (
                    <div>
                        <h2><Skeleton width={300} height={36} /></h2>
                        <Skeleton style={{marginTop: '1rem'}} width="80%" height={20} />
                        <Skeleton style={{marginTop: '1.5rem'}} width="100%" height={48} />
                        <Skeleton style={{marginTop: '1rem'}} width="100%" height={48} />
                    </div>
                ) : (
                    <>
                        <h2>
                            {metadata.title}
                            <HelpTip content="Your vote is private. The first vote also creates your smart wallet." />
                        </h2>
                        <p style={{ marginTop: '0.5rem', color: '#aaa' }}>{metadata.description}</p>
                        
                        {!eligibility ? (
                            <NotEligible />
                        ) : election.status !== 'open' ? (
                            <div style={{ marginTop: '2rem', padding: '1rem', background: '#fefcbf', textAlign: 'center' }}>
                                This election is not currently open for voting. (Status: {election.status})
                            </div>
                        ) : (
                            <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem', marginTop: '1.5rem' }}>
                                {metadata.options.map((option, index) => (
                                    <button 
                                        key={option.id} 
                                        onClick={() => cast(index)} 
                                        disabled={loading}
                                        className="btn btn-primary"
                                    >
                                        Vote for {option.label}
                                    </button>
                                ))}
                            </div>
                        )}
                    </>
                )}

                {loading && <div style={{marginTop: '2rem', textAlign: 'center'}}><span className="loading loading-dots loading-lg"></span><p>{statusText || "Loading..."}</p></div>}

                {receipt && (
                    <div style={{ marginTop: '2rem', padding: '1rem', background: '#f0fdf4' }}>
                        <p><b>UserOp Hash:</b></p>
                        <p style={{ wordBreak: 'break-all', fontFamily: 'monospace' }}>{receipt}</p>
                    </div>
                )}
            </div>
        </>
    );
}

// Helper to poll for proof job completion
async function pollForResult<T extends { status?: string }>(url: string, token: string | null, interval = 2000, maxAttempts = 30): Promise<T> {
  for (let i = 0; i < maxAttempts; i++) {
    await new Promise(resolve => setTimeout(resolve, interval));
    const data = await jsonFetcher([url, token || '']);
    if (data.status === 'done') return data as T;
  }
  throw new Error(`Polling timed out for ${url}`);
};

export default withAuth(VotePage);
```

// Path: packages/frontend/src/translations/bg.json
```json
{
  "login.retry": "Прозорецът бе затворен.",
  "login.retryBtn": "Опитай отново",
  "login.switch": "Превключи към макет",
  "account.logout": "Изход",
  "account.switch": "Смени метода",
  "account.role": "Смяна на роля",
  "account.roleChanged": "Ролята е обновена",
  "account.roleFailed": "Неуспешна смяна"
}
```

// Path: packages/frontend/src/translations/en.json
```json
{
  "login.retry": "Login window closed.",
  "login.retryBtn": "Retry",
  "login.switch": "Switch to Mock",
  "account.logout": "Logout",
  "account.switch": "Switch Login Method",
  "account.role": "Change User Role",
  "account.roleChanged": "Role updated",
  "account.roleFailed": "Failed to update"
}
```

