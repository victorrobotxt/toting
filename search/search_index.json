{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Toting Example Documentation","text":"<p>Welcome to the Toting Example documentation site. Use the navigation menu to explore architecture notes, developer guides, and more.</p>"},{"location":"adr-002-event-sourcing/","title":"ADR-002 Event Sourcing","text":"<p>We decided to mirror key EVM events to Postgres so that the backend can query historical data without relying on a node archive.</p> <pre><code>sequenceDiagram\n    participant EVM\n    participant Indexer\n    participant Postgres\n    EVM--&gt;&gt;Indexer: Emit ContractEvent\n    Indexer--&gt;&gt;Postgres: INSERT events table\n</code></pre>"},{"location":"adr-002-event-sourcing/#pros","title":"Pros","text":"<ul> <li>Simple queries via SQL</li> <li>Avoids the cost of historical RPC calls</li> </ul>"},{"location":"adr-002-event-sourcing/#cons","title":"Cons","text":"<ul> <li>Extra storage requirements</li> <li>Indexer service adds operational overhead</li> </ul>"},{"location":"architecture_adr/","title":"Architecture ADR","text":"<p>This ADR illustrates the proof pipeline.</p> <pre><code>flowchart LR\n    Circom --&gt; Solidity\n    Solidity --&gt; Bridge\n    Bridge --&gt; Anchor\n</code></pre>"},{"location":"backend_pbis/","title":"Backend PBIs","text":"<p>The following product backlog items (PBIs) capture upcoming backend work.</p>"},{"location":"backend_pbis/#b-01-robust-oauth2-eid-flow","title":"B-01 Robust OAuth2 / eID Flow","text":"<ul> <li>Implement real OAuth2 code\u2192token exchange and refresh token handling.</li> <li>Validate ID token signature and claims using <code>python-jose</code>.</li> <li>Store tokens in a secure database table with rotation.</li> <li>30\u2011minute ID token TTL with automatic silent refresh.</li> <li>Invalid or expired tokens return HTTP 401.</li> </ul>"},{"location":"backend_pbis/#b-02-api-key-rate-limiting-layer","title":"B-02 API Key &amp; Rate-Limiting Layer","text":"<ul> <li>CRUD endpoints for API keys under <code>/admin/api-keys</code> (Basic Auth protected).</li> <li>Rate limit requests to 60 per minute per key/IP using a Redis token bucket.</li> <li>Log API key usage and respond with HTTP 429 when limits are exceeded.</li> </ul>"},{"location":"backend_pbis/#b-03-election-metadata-rest-api","title":"B-03 Election Metadata REST API","text":"<ul> <li>Persist election objects including id, meta, start/end, status and tally.</li> <li>Endpoints:</li> <li><code>GET /elections</code> \u2192 list elections.</li> <li><code>GET /elections/{id}</code> \u2192 full JSON including tally.</li> <li>Auto-generate Swagger docs.</li> <li>Models with SQLAlchemy and background task to sync EVM events.</li> <li>Use Pydantic schemas with versioning.</li> </ul>"},{"location":"backend_pbis/#b-04-websocket-push-live-block-height-countdown","title":"B-04 WebSocket Push: Live Block Height &amp; Countdown","text":"<ul> <li>WebSocket endpoint <code>/ws/chain</code> pushing <code>{block, remaining}</code> every 3 s.</li> <li>Support graceful reconnects and heartbeat messages.</li> <li>Implement with <code>FastAPI</code> WebSocket routes using shared web3 listener.</li> </ul>"},{"location":"backend_pbis/#b-05-celery-job-queue-for-heavy-tasks","title":"B-05 Celery Job Queue for Heavy Tasks","text":"<ul> <li><code>POST /jobs/{type}</code> creates a job row and returns its id.</li> <li>Worker updates status and progress metadata.</li> <li><code>GET /jobs/{id}</code> shows <code>queued</code> or <code>running</code> states and results when done.</li> </ul>"},{"location":"backend_pbis/#b-06-audit-trail-logger-worm","title":"B-06 Audit-Trail Logger (WORM)","text":"<ul> <li>Hash-chain every state-changing call and background action.</li> <li>Store logs in append-only storage with daily root export.</li> <li>Provide a CLI to verify the log chain and detect tampering.</li> </ul>"},{"location":"backend_pbis/#b-07-prometheus-grafana-metrics","title":"B-07 Prometheus &amp; Grafana Metrics","text":"<ul> <li>Expose <code>/metrics</code> in Prometheus format for latency, errors and queue length.</li> <li>Commit a Grafana dashboard JSON to the repository.</li> <li>Extend <code>docker-compose</code> with <code>prom/prometheus</code> and <code>grafana/grafana</code> services.</li> </ul>"},{"location":"backend_pbis/#b-08-load-test-harness-locust","title":"B-08 Load-Test Harness (Locust)","text":"<ul> <li>CI job fails if 95th percentile latency &gt; 300\u00a0ms for <code>/elections</code> and WS lag &gt; 1\u00a0s.</li> <li>Produce a load test report artifact using Locust.</li> </ul>"},{"location":"backend_pbis/#b-09-admin-dashboard-role-based-access","title":"B-09 Admin Dashboard &amp; Role-Based Access","text":"<ul> <li>Secure admin-only HTTP interface under <code>/admin/*</code>.</li> <li>Users table stores email and role.</li> <li>Middleware checks the <code>admin</code> claim in JWTs; non-admins receive HTTP 403.</li> <li>Endpoints to manage users and read system metrics:</li> <li><code>GET /admin/users</code> lists users and roles.</li> <li><code>POST /admin/users</code> creates a user with role <code>admin</code> or <code>viewer</code>.</li> <li><code>PUT /admin/users/{id}</code> changes a user role.</li> <li><code>DELETE /admin/users/{id}</code> removes a user.</li> <li><code>GET /admin/metrics</code> shows request rate and queue stats.</li> <li>Swagger groups these routes under an \"Admin operations\" tag.</li> <li>Unit tests cover authorization and error cases.</li> </ul>"},{"location":"backend_pbis/#b-10-email-sms-notification-service","title":"B-10 Email &amp; SMS Notification Service","text":"<ul> <li>Event hooks publish notifications for new elections, closing windows and final tallies.</li> <li>Celery worker sends templated email via SendGrid and optional SMS via Twilio.</li> <li><code>GET /notifications/status/{job_id}</code> reports <code>{queued|sent|failed}</code> with up to three retries.</li> <li>Notifications table tracks payloads, attempts and errors.</li> <li>Integration tests mock the mail and SMS providers.</li> </ul>"},{"location":"backend_pbis/#b-11-graphql-proxy-layer","title":"B-11 GraphQL Proxy Layer","text":"<ul> <li><code>/graphql</code> endpoint wraps existing REST APIs.</li> <li>Supports queries for elections, users and metrics plus mutations to create or delete users.</li> <li>Schema validation rejects unknown fields; playground disabled in production.</li> <li>Implement with Ariadne or Strawberry and generate type definitions.</li> <li>Unit tests target resolver functions with 90% coverage.</li> </ul>"},{"location":"backend_pbis/#b-12-backend-cli-for-admins-typer","title":"B-12 Backend CLI for Admins (Typer)","text":"<ul> <li>Command <code>backend-admin</code> provides subcommands:</li> <li><code>healthcheck</code> to ping Postgres, Redis and RabbitMQ.</li> <li><code>list-users --role=admin</code> to print users with a given role.</li> <li><code>migrate</code> runs Alembic migrations.</li> <li><code>seed-demo</code> inserts demo data.</li> <li>Returns exit code\u00a00 on success and includes README examples.</li> <li>Implement using Typer and SQLAlchemy Core with unit tests for each command.</li> </ul>"},{"location":"backend_pbis/#b-13-zero-knowledge-proof-api","title":"B-13 Zero-Knowledge Proof API","text":"<ul> <li><code>/api/zk/{circuit}</code> <code>POST</code> accepts JSON, returns proof + pubSignals.</li> <li>Runs in Celery worker with concurrency = 2 \u00d7 CPU.</li> <li>Proofs cached in Redis keyed by input SHA-256.</li> </ul>"},{"location":"backend_pbis/#b-14-evm-event-indexer","title":"B-14 EVM Event Indexer","text":"<ul> <li>Async task reading ElectionManager logs, upserts Postgres, broadcasts WebSocket.</li> </ul>"},{"location":"backend_pbis/#b-15-rate-limit-bypass-for-internal-ips","title":"B-15 Rate-Limit Bypass for Internal IPs","text":"<ul> <li>CIDR whitelist via env var.</li> </ul>"},{"location":"backend_pbis/#b-16-grpc-proof-service","title":"B-16 gRPC Proof Service","text":"<ul> <li>gRPC wrapper around <code>/api/zk/*</code> for micro-service internal calls.</li> <li>Proto definitions and Python server implementation.</li> <li>Depends on C-06.</li> </ul>"},{"location":"backend_pbis/#b-17-streaming-blocks-listener","title":"B-17 Streaming Blocks Listener","text":"<ul> <li>Async generator that yields new block and remaining time.</li> <li>Replaces current polling; lag on Anvil must be \u2264 1\u00a0s.</li> <li>Depends on SC-04.</li> </ul>"},{"location":"backend_pbis/#b-18-oauth2-token-cache-revocation","title":"B-18 OAuth2 Token Cache Revocation","text":"<ul> <li>Store JTI \u2192 revoked boolean respecting <code>exp</code> and <code>nbf</code> claims.</li> <li>Flush revoked entries via nightly cron.</li> <li>100\u00a0% unit test coverage.</li> <li>Depends on B-01.</li> </ul>"},{"location":"backend_pbis/#b-19-restgraphql-deprecation-layer","title":"B-19 REST\u2192GraphQL Deprecation Layer","text":"<ul> <li>Add deprecation headers and metrics to REST endpoints.</li> <li>REST calls must log a warning after hitting <code>/elections</code>.</li> <li>Depends on B-11.</li> </ul>"},{"location":"backend_pbis/#b-20-vault-based-secrets","title":"B-20 Vault-Based Secrets","text":"<ul> <li>Swap environment secrets for HashiCorp Vault.</li> <li>GitHub Actions inject the token.</li> <li>Ensure zero secrets appear in logs.</li> <li>No dependencies.</li> </ul>"},{"location":"backend_pbis/#b-21-openid-verifiable-credentials","title":"B-21 OpenID \u2192 Verifiable Credentials","text":"<ul> <li>Replace dummy JWT with EU eIDAS Verifiable Credential.</li> <li><code>python-jose</code> verifies the JWS signature.</li> <li>Option for a mock credential without connecting to eIDAS.</li> <li>AC: smoke test signs and verifies a real VC.</li> <li>Depends on B-01.</li> </ul>"},{"location":"backend_pbis/#b-22-oauth-pkce-mtls","title":"B-22 OAuth PKCE &amp; mTLS","text":"<ul> <li>Add S256 code challenge parameter to the OAuth flow.</li> <li>Optional mTLS on the token endpoint.</li> <li>Integration test using mitm-proxy.</li> <li>Depends on B-01.</li> </ul>"},{"location":"backend_pbis/#b-23-hierarchical-rbac","title":"B-23 Hierarchical RBAC","text":"<ul> <li>Roles: viewer \u2192 editor \u2192 admin.</li> <li>Implement using FastAPI dependency injection.</li> <li>Unit tests cover 100% of RBAC code.</li> <li>Depends on B-09.</li> </ul>"},{"location":"backend_pbis/#b-24-off-chain-voting-simulation","title":"B-24 Off-chain Voting Simulation","text":"<ul> <li><code>/simulate</code> returns gas+fee and expected tally.</li> <li>Runs as a Celery job.</li> <li>Result must be within \u2264 2% diff vs on-chain test.</li> <li>Depends on C-03.</li> </ul>"},{"location":"backend_pbis/#b-25-live-metrics-websocket","title":"B-25 Live Metrics WebSocket","text":"<ul> <li><code>/ws/metrics</code> pushes Prometheus counters for FE devtools overlay.</li> <li>Depends on B-07.</li> </ul>"},{"location":"backend_pbis/#b-26-rest-deprecation-proxy","title":"B-26 REST Deprecation Proxy","text":"<ul> <li>Returns HTTP 299 Deprecated header with link to GraphQL.</li> <li>Middleware test verifies the header.</li> <li>Depends on B-19.</li> </ul>"},{"location":"backend_pbis/#b-27-pydantic-v2-migration","title":"B-27 Pydantic v2 Migration","text":"<ul> <li>Drop v1 compatibility.</li> <li>Benchmark shows \u2265 10% performance gain.</li> <li>No dependencies.</li> </ul>"},{"location":"c13_e2e_circuit_docs/","title":"C-13 E2E Circuit Documentation","text":"<p>This guide describes the end-to-end circuit architecture. It includes constraint graphs generated from the Circom sources, an overview of the witness inputs and the Groth16 trusted setup steps.</p>"},{"location":"c13_e2e_circuit_docs/#constraint-graph","title":"Constraint Graph","text":"<p>The <code>circomgraph</code> tool can export a visual representation of each R1CS file. After compiling the circuits run:</p> <pre><code>npx -y circom2 circuits/qv/qv_tally.circom --r1cs\nnpx -y circomgraph artifacts/qv_tally/qv_tally.r1cs -o docs/assets/qv_tally.svg\n</code></pre> <p>The resulting SVG can be referenced directly in the docs:</p> <p></p>"},{"location":"c13_e2e_circuit_docs/#circuit-inputs","title":"Circuit Inputs","text":"<p>The <code>QVTally</code> example circuit accepts vote sums and their square roots. The prover supplies both arrays as private inputs and receives a single public output confirming all checks passed.</p> Signal Description <code>sums[0..n]</code> Vote totals for each option <code>results[0..n]</code> Square roots proving validity of the sums <code>ok</code> Output flag set to <code>1</code> when constraints are satisfied"},{"location":"c13_e2e_circuit_docs/#trusted-setup-workflow","title":"Trusted Setup Workflow","text":"<p>The repository uses Groth16 proving. The high level process is:</p> <ol> <li>Compile all circuits to R1CS and WASM using <code>npx -y circom2</code>.</li> <li>Generate a Powers of Tau ceremony:    <code>bash    snarkjs powersoftau new bn128 14 pot14_0000.ptau    snarkjs powersoftau contribute pot14_0000.ptau pot14_0001.ptau --name \"first\"    snarkjs powersoftau prepare phase2 pot14_0001.ptau pot14_final.ptau</code></li> <li>Produce the initial zkey for each circuit:    <code>bash    snarkjs groth16 setup artifacts/qv_tally/qv_tally.r1cs pot14_final.ptau artifacts/qv_tally/zkey_0.zkey</code></li> <li>Contribute additional randomness with <code>snarkjs zkey contribute</code> and    verify the final zkey.</li> <li>Export Solidity verifiers and store all artifacts under <code>artifacts/</code>.</li> </ol>"},{"location":"c13_e2e_circuit_docs/#publishing-with-mkdocs","title":"Publishing with MkDocs","text":"<p>MkDocs builds the documentation site via <code>mkdocs build</code>. During CI the site is published to GitHub Pages from the <code>gh-pages</code> branch. Run <code>mkdocs serve</code> locally to preview the pages.</p>"},{"location":"circuit_pbis/","title":"Circuit PBIs","text":"<p>The following product backlog items (PBIs) outline planned improvements to the ZK circuits.</p>"},{"location":"circuit_pbis/#c-01-eligibility-v2","title":"C-01 Eligibility v2","text":"<ul> <li>ZK circuit overhaul for passport / age / residency.</li> <li>Support up to 3 independent eligibility proofs in a single witness (boolean OR logic).</li> <li>Inputs: Merkle path for country list, birth-date commit, residence commit.</li> <li>Constraints &lt; 140k R1CS constraints.</li> <li>Must still compile in &lt; 30 s on CI.</li> <li>Unit tests in <code>circuits/eligibility/__tests__</code> proving \u2265 99 % valid, 100 % invalid rejection.</li> </ul>"},{"location":"circuit_pbis/#c-02-voice-credits-range-proof-implemented","title":"C-02 Voice-Credits Range Proof (Implemented)","text":"<ul> <li>Prevent overflow / negative credit injection.</li> <li>Add field range checks <code>0 \u2264 vc \u2264 1\u00a0000\u00a0000</code>.</li> <li>Enforce quadratic cost formula inside circuit to close \"cheap vote\" loophole.</li> <li>Groth16 proof size unchanged (\u2248 192 bytes).</li> </ul>"},{"location":"circuit_pbis/#c-03-batch-tally-implemented","title":"C-03 Batch Tally (Implemented)","text":"<ul> <li>Aggregate 128 encrypted ballots per proof.</li> <li>Circuit takes an array of 128 ElGamal ciphertexts + public key, outputs <code>(sumA, sumB)</code>.</li> <li>Provide a Poseidon root to let contracts verify subsets.</li> <li>Constraint budget \u2264 6\u00a0M.</li> <li>Benchmark script dumps R1CS, generates zkey, exports verifier (Sol) + <code>tally.wasm</code>.</li> </ul>"},{"location":"circuit_pbis/#c-04-snarkjs-pipeline","title":"C-04 SnarkJS Pipeline","text":"<ul> <li>Reusable Makefile + cache.</li> <li><code>make circuits</code> rebuilds only dirty <code>.circom</code> files.</li> <li>Output artifacts in <code>artifacts/{name}/{hash}/</code> with Git LFS-friendly <code>.gitignore</code> stub.</li> <li>CI job checks hash drift vs. committed verifier.</li> </ul>"},{"location":"circuit_pbis/#c-05-proof-fuzzing-harness-implemented","title":"C-05 Proof Fuzzing Harness (Implemented)","text":"<ul> <li>Negative-testing with <code>ffmpeg-wasm</code> noise.</li> <li>Generate 1\u00a0000 random bad witnesses per circuit; ensure verifier reverts.</li> </ul>"},{"location":"circuit_pbis/#c-06-deposit-nullifier-circuit","title":"C-06 Deposit-Nullifier Circuit","text":"<ul> <li>Groth16 circuit proving one-time deposit without leaking identity.</li> <li>\u2264 200 k constraints.</li> <li>Rejects duplicate nullifier in 1 000 negative tests.</li> <li>Solidity verifier auto-generated and unit-tested in Foundry.</li> </ul>"},{"location":"circuit_pbis/#c-07-poseidon-hash-refactor","title":"C-07 Poseidon Hash Refactor","text":"<p>This circuit checks a commitment's inclusion in a Merkle tree and derives a nullifier from the same secret used in the commitment. The public inputs are the Merkle root and resulting nullifier. Witnesses contain the secret and Merkle path. A Poseidon-based proof ensures the nullifier cannot be forged while keeping the secret private. The Solidity verifier is generated from the Groth16 key and exercised in a Foundry test that attempts 1\u00a0000 deposits with a reused nullifier, expecting reverts after the first. - Replace MiMC in all circuits with Poseidon (Arkworks params 3,5). - Proof size must remain unchanged. - Benchmarks \u2264 5 % slower than baseline.</p>"},{"location":"circuit_pbis/#c-08-recursive-batch-tally-v2-implemented","title":"C-08 Recursive Batch-Tally v2 (Implemented)","text":"<ul> <li>Halo2 or Plonk recursion proof that rolls 8 \u00d7 <code>C-03</code> tallies into one.</li> <li>Constraint budget \u2264 2 M.</li> <li>Prove &amp; verify under 30 s on CI.</li> </ul>"},{"location":"circuit_pbis/#c-09-signal-range-proofs","title":"C-09 Signal Range Proofs","text":"<ul> <li>Generic gadget library for <code>0 \u2264 value \u2264 2\u00b3\u00b2-1</code> usable by other circuits.</li> <li>Fuzz harness must find zero false negatives/positives.</li> </ul>"},{"location":"circuit_pbis/#c-10-parallel-witness-builder-implemented","title":"C-10 Parallel Witness Builder (Implemented)","text":"<ul> <li>Rust <code>rayon</code> based <code>build_witness</code> saturating all cores.</li> <li>2 \u00d7 speed-up vs serial.</li> <li>Integrated in Makefile with CI proving speed shortcut.</li> </ul>"},{"location":"circuit_pbis/#c-11-multi-curve-compatibility","title":"C-11 Multi-Curve Compatibility","text":"<ul> <li>Port circuits to support BN254 and BLS12-381.</li> <li>Build matrix in CI.</li> <li>Contracts auto-select curve at deploy.</li> </ul>"},{"location":"circuit_pbis/#c-12-proof-compression-benchmark","title":"C-12 Proof Compression Benchmark","text":"<ul> <li>Script that compares zkey size, proof size and verifier gas across <code>C-01\u2026C-11</code>.</li> <li>CI uploads CSV artefact.</li> </ul>"},{"location":"circuit_pbis/#c-13-e2e-circuit-docs","title":"C-13 E2E Circuit Docs","text":"<ul> <li>Architecture doc with constraint graphs, input tables and trusted setup workflow.</li> <li>Published as MkDocs site with diagrams exported from Circom graph.</li> <li>See C-13 E2E Circuit Documentation.</li> </ul>"},{"location":"circuit_pbis/#c-14-multi-proof-aggregator","title":"C-14 Multi-Proof Aggregator","text":"<ul> <li>Groth16 \u2192 BLS12-381 aggregator that rolls up \u2264 512 vote proofs into one.</li> <li>Solidity verifier gas \u2264 6\u00a0M.</li> <li>AC: same public signals out, \u2264 5\u00a0s prove time on CI.</li> <li>Depends on C-08.</li> </ul>"},{"location":"circuit_pbis/#c-15-trusted-setup-audit-kit","title":"C-15 Trusted-Setup Audit Kit","text":"<ul> <li>Script reproduces PTAU &amp; ZKey hashes, uploads to release.</li> <li>AC: <code>make audit</code> exits\u00a00 on identical hashes, non-zero otherwise.</li> <li>Depends on C-04.</li> </ul>"},{"location":"circuit_pbis/#c-16-warp-swap-curve-port","title":"C-16 Warp-Swap Curve Port","text":"<ul> <li>Compile circuits for bn254 and curve25519 via CirC.</li> <li>AC: unit tests pass on both targets; Verifier gas delta \u2264 +5\u00a0%.</li> <li>Depends on C-11.</li> </ul>"},{"location":"circuit_pbis/#c-17-hardware-keccak-gadget","title":"C-17 Hardware Keccak Gadget","text":"<ul> <li>Verilog Poseidon ASIC stub + constraint mapping; prove on GPU CI runner.</li> <li>AC: FPGA sim &lt; 150\u00a0ms per hash.</li> <li>Depends on C-07.</li> </ul>"},{"location":"circuit_pbis/#c-18-stateless-witness-builder","title":"C-18 Stateless Witness Builder","text":"<ul> <li>Rust lib returns streaming iterator so browser can GC.</li> <li>Benchmark 30\u00a0% less peak RAM vs baseline.</li> <li>Depends on C-10.</li> </ul>"},{"location":"contracts_relay_pbis/","title":"Smart-Contracts &amp; Relay PBIs","text":"<p>The following product backlog items (PBIs) capture upcoming smart-contract and relay work.</p>"},{"location":"contracts_relay_pbis/#sc-01-upgrade-safe-electionmanager-v2","title":"SC-01 Upgrade-safe ElectionManager V2","text":"<ul> <li>Break storage into explicit structs.</li> <li>Add UUPS proxy.</li> <li>Foundry fuzz proves no storage-slot clobber.</li> <li>AC: upgrade test passes.</li> </ul>"},{"location":"contracts_relay_pbis/#sc-02-eip-712-typed-ballots","title":"SC-02 EIP-712 Typed Ballots","text":"<ul> <li>Off-chain typed data \u2192 on-chain verify in submitBallot.</li> <li>Gas \u2264 50 k.</li> <li>Depends on SC-01.</li> </ul>"},{"location":"contracts_relay_pbis/#sc-03-batch-votes-compression","title":"SC-03 Batch Votes Compression","text":"<ul> <li>MACI message bundle of 64 ballots.</li> <li>Saving \u2265 25 % gas per voter.</li> <li>Depends on C-03.</li> </ul>"},{"location":"contracts_relay_pbis/#sc-04-relay-daemon-failover","title":"SC-04 Relay-Daemon Failover","text":"<ul> <li>Hot/standby pod with leader election via Postgres advisory lock.</li> <li>Recovery \u2264 10 s.</li> </ul>"},{"location":"contracts_relay_pbis/#sc-05-cross-chain-finality-oracle","title":"SC-05 Cross-Chain Finality Oracle","text":"<ul> <li>Simple BEEFY-style contract emits finality for Solana mirror.</li> <li>Unit tests mock lag.</li> <li>Depends on SC-04.</li> </ul>"},{"location":"contracts_relay_pbis/#sc-06-gas-escalator","title":"SC-06 Gas-Escalator","text":"<ul> <li>Orchestrator hits eth_maxPriorityFeePerGas.</li> <li>Resubmits if tx not mined in 30 s.</li> </ul>"},{"location":"contracts_relay_pbis/#sc-07-chain-health-dashboard","title":"SC-07 Chain Health Dashboard","text":"<ul> <li>Prometheus exporter exposes mempool depth, relay lag, Solana slot.</li> <li>Grafana JSON committed.</li> <li>Depends on CI-04.</li> </ul>"},{"location":"env_vars/","title":"Environment Variables","text":"<p>This document lists all environment variables needed to run the backend and frontend services.</p>"},{"location":"env_vars/#backend","title":"Backend","text":"Name Type Default Description <code>DATABASE_URL</code> string (none) Connection string for Postgres. Required. <code>CELERY_BROKER</code> string <code>redis://localhost:6379/0</code> URL for Celery task broker. <code>CELERY_BACKEND</code> string <code>redis://localhost:6379/0</code> URL for Celery result backend. <code>CELERY_TASK_ALWAYS_EAGER</code> bool <code>false</code> Run Celery tasks synchronously for local testing. <code>CELERY_METRICS_PORT</code> int (unset) If set, expose Prometheus metrics on this port. <code>CIRCUIT_MANIFEST</code> string <code>/app/circuits/manifest.json</code> Path to circuit manifest with default hashes. <code>SENTRY_DSN</code> string (unset) Sentry DSN for error reporting. <code>NEXT_PUBLIC_API_BASE</code> string <code>http://localhost:3000</code> Allowed frontend origin for CORS. <code>EVM_RPC</code> string <code>http://localhost:8545</code> JSON\u2011RPC endpoint for the EVM chain. <code>CHAIN_ID</code> int <code>31337</code> Chain ID for contract interactions. <code>ORCHESTRATOR_KEY</code> string (none) Private key used by backend and orchestrator. <code>ELECTION_MANAGER</code> string <code>0x0000000000000000000000000000000000000000</code> Address of deployed <code>ElectionManager</code> contract. <code>PAYMASTER</code> string <code>0x0000000000000000000000000000000000000000</code> Verifying Paymaster address. <code>GRAO_BASE_URL</code> string <code>https://demo-oauth.example</code> OAuth provider base URL. <code>GRAO_CLIENT_ID</code> string <code>test-client</code> OAuth client ID. <code>GRAO_CLIENT_SECRET</code> string <code>test-client-secret</code> OAuth client secret. <code>JWT_SECRET</code> string <code>dev-jwt-secret</code> Secret for signing mock ID tokens. <code>GRAO_REDIRECT_URI</code> string <code>http://localhost:3000/auth/callback</code> OAuth redirect URI. <code>USE_REAL_OAUTH</code> bool <code>false</code> Use real OAuth provider instead of mock login. <code>PROOF_QUOTA</code> int <code>25</code> Daily proof generation limit per user. <code>IPFS_API_URL</code> string <code>https://ipfs.infura.io:5001/api/v0/add</code> Endpoint for pinning JSON to IPFS. <code>IPFS_GATEWAY</code> string <code>https://ipfs.io/ipfs/</code> Gateway URL used to fetch pinned JSON. <code>IPFS_API_TOKEN</code> string (unset) Optional bearer token for the IPFS API. <code>EVM_MAX_RETRIES</code> int <code>0</code> How many times the orchestrator waits for the RPC (0 = forever)."},{"location":"env_vars/#frontend","title":"Frontend","text":"Name Type Default Description <code>NEXT_PUBLIC_API_BASE</code> string <code>http://localhost:8000</code> Base URL of the backend API. <code>NEXT_PUBLIC_BUNDLER_URL</code> string <code>http://localhost:3001/rpc</code> RPC endpoint of the ERC\u20114337 bundler. <code>NEXT_PUBLIC_WALLET_FACTORY</code> string (none) Address of the wallet factory contract. <code>NEXT_PUBLIC_ENTRYPOINT</code> string (none) EntryPoint contract address. <code>NEXT_PUBLIC_ELECTION_MANAGER</code> string (none) Address of the ElectionManager contract. <code>NEXT_PUBLIC_PAYMASTER</code> string (unset) Optional verifying paymaster address. <code>NEXT_PUBLIC_SEPOLIA_ENTRYPOINT</code> string (unset) Sepolia EntryPoint contract address. <code>NEXT_PUBLIC_SEPOLIA_WALLET_FACTORY</code> string (unset) Sepolia wallet factory contract. <code>NEXT_PUBLIC_SEPOLIA_ELECTION_MANAGER</code> string (unset) Sepolia ElectionManager contract. <code>NEXT_PUBLIC_SEPOLIA_BUNDLER_URL</code> string (unset) Bundler RPC URL for Sepolia."},{"location":"frontend_pbis/","title":"Frontend PBIs","text":"<p>The following product backlog items (PBIs) capture upcoming frontend work.</p>"},{"location":"frontend_pbis/#f-01-wallet-onboarding-wizard","title":"F-01 Wallet Onboarding Wizard","text":"<ul> <li>3-step React flow (connect, generate ZK proof, sign EIP-712).</li> <li>Uses wagmi + viem; no ethers.js.</li> </ul>"},{"location":"frontend_pbis/#f-02-live-countdown-banner","title":"F-02 Live Countdown Banner","text":"<ul> <li>Visibility-triggered SWR hook hitting <code>/ws/chain</code>.</li> <li>Switches to \"Tallying\u2026\" when election closed.</li> </ul>"},{"location":"frontend_pbis/#f-03-accessibility-audit","title":"F-03 Accessibility Audit","text":"<ul> <li>Achieve Lighthouse a11y \\u2265 90.</li> <li>Dark-mode contrast fixes.</li> </ul>"},{"location":"frontend_pbis/#f-04-solana-tally-viewer","title":"F-04 Solana Tally Viewer","text":"<ul> <li>After bridge, show bar chart (Recharts) with votes.</li> </ul>"},{"location":"frontend_pbis/#f-05-multi-wallet-connector","title":"F-05 Multi-Wallet Connector","text":"<ul> <li>Add Ledger &amp; WalletConnect flows; wagmi auto-detect; Storybook demo.</li> </ul>"},{"location":"frontend_pbis/#f-06-live-gas-fee-estimator","title":"F-06 Live Gas Fee Estimator","text":"<ul> <li>SWR hook hitting <code>/api/gas</code>. Shows 95th percentile, updates every 15 s.</li> <li>Unit test with MSW.</li> </ul>"},{"location":"frontend_pbis/#f-07-offline-proof-builder","title":"F-07 Offline Proof Builder","text":"<ul> <li>Web Worker doing circom-wasm witness &amp; proof (C-06) entirely client-side; progress bar hooked to UI.</li> </ul>"},{"location":"frontend_pbis/#f-08-i18n-en-bg","title":"F-08 i18n (en, bg)","text":"<ul> <li>Next-int-l10n; runtime locale switch; E2E Cypress test verifying bg translations.</li> </ul>"},{"location":"frontend_pbis/#f-09-accessibility-100-score","title":"F-09 Accessibility 100 Score","text":"<ul> <li>Fix remaining Lighthouse a11y issues; include CI budget gate &lt; 1 regression.</li> </ul>"},{"location":"frontend_pbis/#f-10-dark-mode-theming-tokens","title":"F-10 Dark-Mode Theming Tokens","text":"<ul> <li>Tailwind CSS vars driven by next-themes; snapshot visual regression tests.</li> </ul>"},{"location":"frontend_pbis/#f-11-zk-proof-worker-pool","title":"F-11 ZK-Proof Worker Pool","text":"<ul> <li>Shared-worker pool (Comlink) multiplexes witness builds; CPU utilisation \\u2265 80 % of cores.</li> </ul>"},{"location":"frontend_pbis/#f-12-ledger-otg-support","title":"F-12 Ledger OTG Support","text":"<ul> <li>WebUSB flow; Cypress E2E on Chromebook runner.</li> </ul>"},{"location":"frontend_pbis/#f-13-real-time-solana-chart","title":"F-13 Real-Time Solana Chart","text":"<ul> <li>Recharts bar chart subscribes to <code>/ws/solana</code>; updates within 2 s of relay.</li> </ul>"},{"location":"frontend_pbis/#f-14-a11y-100-u2192-wcag-aaa","title":"F-14 A11y 100 \\u2192 WCAG AAA","text":"<ul> <li>Goes beyond Lighthouse; axe-core CI gate \\u2264 1 violation.</li> </ul>"},{"location":"frontend_pbis/#f-15-i18n-rtl-plurals","title":"F-15 i18n RTL &amp; Plurals","text":"<ul> <li>Arabic localisation + ICU plural-rules; E2E visual diff.</li> </ul>"},{"location":"frontend_pbis/#f-16-pwa-offline-mode","title":"F-16 PWA Offline Mode","text":"<ul> <li>ServiceWorker caches circuit WASM &amp; proofs; acts as proof cache layer.</li> </ul>"},{"location":"frontend_pbis/#f-17-eip-6963-wallet-standard","title":"F-17 EIP-6963 Wallet Standard","text":"<ul> <li>Replace wagmi auto-detect with official API; Storybook example.</li> </ul>"},{"location":"frontend_pbis/#f-18-frontend-login-page-redirect-to-oauth-initiation","title":"F-18 Frontend Login Page &amp; Redirect to OAuth Initiation","text":"<ul> <li>Implement a dedicated <code>/login</code> route with a \u201cLog in with eID\u201d button.</li> <li>Fetch <code>/auth/initiate</code> and open the returned URL or HTML inside a popup window so the main tab never shows raw JSON.</li> </ul>"},{"location":"frontend_pbis/#f-19-callback-handling-token-storage-in-authprovider","title":"F-19 Callback Handling &amp; Token Storage in AuthProvider","text":"<ul> <li>Popup posts <code>{ id_token, eligibility }</code> back to the opener after <code>/auth/callback</code>.</li> <li><code>AuthProvider</code> listens for the message, stores the token and eligibility, then redirects to <code>/dashboard</code>.</li> </ul>"},{"location":"frontend_pbis/#f-20-dashboard-navbar-adjustments-post-login","title":"F-20 Dashboard &amp; Navbar Adjustments Post-Login","text":"<ul> <li>Navbar shows an Account menu when authenticated and guards protected pages.</li> <li>Logged-in users visiting <code>/login</code> are redirected to <code>/dashboard</code> automatically.</li> </ul>"},{"location":"frontend_pbis/#f-21-eligibility-voting-links-only-visible-when-eligible","title":"F-21 Eligibility &amp; Voting Links Only Visible When Eligible","text":"<ul> <li>Navbar and dashboard links depend on the <code>eligibility</code> flag from the backend.</li> <li>Voting buttons disabled when <code>eligibility === false</code>.</li> </ul>"},{"location":"integration_pbis/","title":"Circuit \u2194 Backend Integration PBIs","text":"<p>The following product backlog items (PBIs) capture upcoming circuit (\u201cvoting engine\u201d) and backend integration work.</p>"},{"location":"integration_pbis/#i-01-unified-circuit-artifact-registry","title":"I-01 Unified Circuit Artifact Registry","text":"<ul> <li>Build step that compiles every <code>.circom</code> file, generating <code>.r1cs</code>, <code>.wasm</code>, and <code>.zkey</code> artifacts plus a <code>manifest.json</code> mapping circuit-hash to artifact paths.</li> <li>Copy <code>manifest.json</code> into the backend Docker image at <code>/app/circuits/</code>.</li> <li>AC: <code>docker compose up backend</code> exposes <code>/app/circuits/manifest.json</code>; CI fails if any committed circuit hash disagrees with the manifest.</li> <li>Depends on C-04.</li> </ul>"},{"location":"integration_pbis/#i-02-proof-as-a-service-api","title":"I-02 Proof-as-a-Service API","text":"<ul> <li>Implement REST endpoints under <code>/api/zk/{circuit}</code> where <code>POST</code> accepts input JSON and returns <code>{ job_id }</code>, and <code>GET /{job_id}</code> returns <code>queued|running|done|error</code> plus <code>{ proof,pubSignals }</code> when done.</li> <li>Dispatch each job to a Celery worker that runs <code>snarkjs wtns calculate</code> then <code>snarkjs groth16 prove</code>.</li> <li>AC: End-to-end FastAPI test\u2014POST eligibility input, poll until <code>done</code>, and verify the returned proof against the on-chain verifier.</li> <li>Depends on I-01 and B-05.</li> </ul>"},{"location":"integration_pbis/#i-03-input-schema-validation-layer","title":"I-03 Input Schema Validation Layer","text":"<ul> <li>Define Pydantic schemas for each circuit\u2019s input JSON; reject unknown fields or out-of-range values before scheduling Celery tasks.</li> <li>Ensure invalid inputs return HTTP 422 immediately.</li> <li>AC: 100 % unit-test coverage for both valid and invalid inputs; invalid input yields HTTP 422 in &lt; 2 ms.</li> <li>Depends on I-02.</li> </ul>"},{"location":"integration_pbis/#i-04-proof-cache-redis","title":"I-04 Proof Cache (Redis)","text":"<ul> <li>Compute SHA-256 over <code>inputJSON || circuitHash</code> and store <code>{ proof,pubSignals }</code> in Redis.</li> <li>On <code>POST</code>, if cache hit, immediately respond with <code>status=done</code> and cached outputs.</li> <li>AC: Load test with 100 identical requests: only the first enqueues a Celery job; the other 99 return from cache in &lt; 50 ms.</li> <li>Depends on I-02.</li> </ul>"},{"location":"integration_pbis/#i-05-auth-aware-proof-quotas","title":"I-05 Auth-Aware Proof Quotas","text":"<ul> <li>Add <code>proof_requests</code> table tracking each user ID \u2192 daily proof count.</li> <li>Enforce an environment-var quota (default 25 proofs/day). Exceeding quota returns HTTP 429.</li> <li>AC: Unit test submits 26 proofs under one JWT; the 26th is rejected with HTTP 429.</li> <li>Depends on B-02 and I-02.</li> </ul>"},{"location":"integration_pbis/#i-06-eligibility-proof-generator","title":"I-06 Eligibility Proof Generator","text":"<ul> <li>Expose <code>/api/zk/eligibility</code> that accepts <code>{ country, dob, residency }</code>, constructs the witness, and returns a Groth16 proof + public signals.</li> <li>Use <code>eligibility.circom</code> (C-01) artifacts behind the scenes.</li> <li>AC: Foundry contract test calls verifier with the generated proof and does not revert; FastAPI integration test completes end-to-end.</li> <li>Depends on C-01 and I-02.</li> </ul>"},{"location":"integration_pbis/#i-07-voice-credit-proof-generator","title":"I-07 Voice-Credit Proof Generator","text":"<ul> <li>Expose <code>/api/zk/voice</code> that accepts <code>{ credits, nonce }</code>, builds the witness for <code>voice_check.circom</code>, and returns proof + public signals.</li> <li>AC: Smoke test calls <code>/api/zk/voice</code>, then <code>QVManager.submitBallot</code> on a local Anvil chain succeeds without revert.</li> <li>Depends on C-02 and I-02.</li> </ul>"},{"location":"integration_pbis/#i-08-batch-tally-proof-generator","title":"I-08 Batch-Tally Proof Generator","text":"<ul> <li>Expose <code>/api/zk/batch_tally</code> that pulls up to 128 encrypted ballots from Postgres, constructs the <code>batch_tally.circom</code> witness, and returns proof + public signals.</li> <li>After proof generation, automatically push calldata to <code>ElectionManager.tallyVotes</code> via <code>web3.py</code>.</li> <li>AC: CI job spins up Anvil, submits 128 ballots, calls the endpoint, and verifies that <code>tallyVotes</code> is mined successfully within 60 s.</li> <li>Depends on C-03 and I-02.</li> </ul>"},{"location":"integration_pbis/#i-09-proof-progress-websocket","title":"I-09 Proof Progress WebSocket","text":"<ul> <li>Implement <code>/ws/proofs/{job_id}</code> which streams status updates <code>{ state:\"queued\"|\"running\", progress:number }</code> by subscribing to Celery progress events every 2 s.</li> <li>AC: Frontend proof UI shows a live progress bar from 0 % \u2192 100 % before the HTTP <code>done</code> response; reconnecting resumes correctly.</li> <li>Depends on B-04 and I-02.</li> </ul>"},{"location":"integration_pbis/#i-10-circuit-versioning-migration","title":"I-10 Circuit Versioning &amp; Migration","text":"<ul> <li>Create <code>circuits</code> table tracking each row\u2019s <code>circuit_hash</code>, <code>ptau_version</code>, and <code>zkey_version</code>.</li> <li>Support blue/green deployment: generate new artifacts, bump version, and let new Celery workers use the new hash while the API still serves old proofs until flip.</li> <li>AC: Integration test demonstrates generating proofs against both v1 and v2 in parallel with zero failed proof requests during the switchover.</li> <li>Depends on I-01.</li> </ul>"},{"location":"integration_pbis/#i-11-detached-proof-audit-trail","title":"I-11 Detached Proof Audit Trail","text":"<ul> <li>After a proof is accepted on\u2010chain, log <code>{ circuit_hash, input_hash, proof_root, timestamp }</code> into an append-only <code>proof_audit</code> table and feed a SHA-chain into the Audit-Trail logger (B-06).</li> <li>AC: CLI <code>backend-admin audit-proof {tx_hash}</code> outputs the row and verifies that the stored <code>proof_root</code> matches the on\u2010chain calldata root.</li> <li>Depends on B-06 and I-02.</li> </ul>"},{"location":"integration_pbis/#i-12-grpc-wrapper-for-proof-api","title":"I-12 gRPC Wrapper for Proof API","text":"<ul> <li>Provide a <code>ProofService</code> gRPC with methods <code>Generate(circuit, inputJSON) \u2192 job_id</code> and <code>Status(job_id) \u2192 { state, proof, pubSignals }</code>.</li> <li>Reuse the same Celery backend and proof-cache logic as REST.</li> <li>AC: <code>grpc-health-probe</code> passes; a Go client sample can successfully invoke eligibility proof generation.</li> <li>Depends on B-16 and I-02.</li> </ul>"},{"location":"integration_pbis/#i-13-multicurve-build-matrix","title":"I-13 Multicurve Build Matrix","text":"<ul> <li>Extend CI to compile circuits under both BN254 and BLS12-381.</li> <li><code>manifest.json</code> includes per-circuit curve info; <code>ProofService</code>/REST honor an <code>x-curve:bls12-381</code> header to select artifacts.</li> <li>AC: Matrix build completes in \u2264 15 min; backend integration tests generate and verify proofs on both curves; corresponding verifier contracts deploy per curve in Foundry tests.</li> <li>Depends on C-11 and I-01.</li> </ul>"},{"location":"integration_pbis/#i-14-frontend-proof-worker-integration","title":"I-14 Frontend Proof Worker Integration","text":"<ul> <li>Update FE PBI F-07: when the Web-Worker fallback is disabled, call <code>/api/zk/*</code> for final proof instead of running pure-WASM proof. Show live WebSocket progress and handle HTTP 429.</li> <li>AC: Cypress e2e test creates a voice-credit proof via backend and completes a vote on a local testnet without errors.</li> <li>Depends on I-02 and F-07.</li> </ul>"},{"location":"integration_pbis/#i-15-end-to-end-e2e-test-workflow","title":"I-15 End-to-End E2E Test Workflow","text":"<ul> <li> <p>GitHub Action that starts the full stack (Anvil, Postgres, backend, frontend), then runs a script to:</p> </li> <li> <p>Create an election via REST</p> </li> <li>FE logs in, calls eligibility &amp; voice proofs via backend</li> <li>Cast a vote</li> <li>Submit batch-tally proof via <code>/api/zk/batch_tally</code></li> <li>Verify on-chain tally and Solana bridge event</li> <li>AC: Workflow passes on <code>main</code>; any failure at an integration point causes failure.</li> <li>Depends on I-06, I-07, I-08, and SC-01.</li> </ul>"},{"location":"local_dev_cookbook/","title":"Local-Dev Cookbook","text":"<p>This guide provides setup instructions for a standard Windows environment using Docker Desktop with the WSL backend. All <code>docker-compose</code> and <code>git</code> commands should be run from a standard terminal like PowerShell or Git Bash in your project's root directory (e.g., <code>D:\\toting\\</code>).</p>"},{"location":"local_dev_cookbook/#quickstart","title":"Quickstart","text":"<ol> <li> <p>Copy Environment File:     From your project root in PowerShell, copy the example environment file.     <code>powershell     cp .env.example .env</code></p> </li> <li> <p>Initialize Git Submodules:     This step is critical and downloads the smart contract dependencies. It must be run from your host machine.     <code>powershell     # In PowerShell, from your project root     git submodule update --init --recursive</code> Verify this step by checking that the <code>D:\\toting\\lib\\openzeppelin-contracts</code> directory is now populated with files.</p> </li> <li> <p>Start Core Services:     This starts the Anvil blockchain and mounts your project directory into the container.     <code>powershell     # In PowerShell, from your project root     docker-compose up -d anvil</code></p> </li> <li> <p>Deploy Contracts:     Execute the setup script inside the <code>anvil</code> container.     <code>powershell     # In PowerShell, from your project root     docker-compose exec anvil /app/scripts/setup_env.sh anvil</code>     If this step succeeds, continue to step 5. If it fails with a \"file not found\" error, please proceed to the Troubleshooting section below.</p> </li> <li> <p>Start All Remaining Services:     <code>powershell     # In PowerShell, from your project root     docker-compose up -d</code></p> <p>Whenever you rerun <code>scripts/setup_env.sh</code> to redeploy the contracts, you must restart the frontend container so it reads the updated <code>.env</code> values. <code>powershell docker-compose restart frontend</code></p> </li> <li> <p>Access the App:     The frontend will be available at <code>http://localhost:3000</code>.</p> </li> </ol>"},{"location":"local_dev_cookbook/#troubleshooting","title":"Troubleshooting","text":""},{"location":"local_dev_cookbook/#error-contracts-not-found-in-applib-on-windows","title":"\"Error: ... contracts not found in /app/lib/.\" on Windows","text":"<p>This is a common issue with Docker Desktop on Windows where file changes on the host (like initializing submodules) are not correctly reflected in the container's volume mount.</p> <p>Follow these steps to perform a hard reset:</p> <ol> <li> <p>Stop and Remove Everything:     This command will stop all containers and, importantly, remove the associated anonymous volumes where old data might be cached.     <code>powershell     # In PowerShell, from your project root     docker-compose down -v</code></p> </li> <li> <p>Restart Docker Desktop:     Click the Docker icon in your system tray and select \"Restart\". This often clears up file-sharing and caching issues. Wait for it to turn green again.</p> </li> <li> <p>Verify Submodules Again:     Just to be sure, run the submodule update command again.     <code>powershell     git submodule update --init --recursive</code></p> </li> <li> <p>Retry the Setup Process:     Now, start again from step 3 of the Quickstart guide.     <code>powershell     docker-compose up -d anvil     docker-compose exec anvil /app/scripts/setup_env.sh anvil</code></p> </li> </ol> <p>If the problem still persists, run this diagnostic command to see what the container's file system looks like. The <code>lib</code> directory should not be empty.</p> <pre><code>docker-compose exec anvil ls -lR /app/lib\n</code></pre>"},{"location":"local_dev_cookbook/#factory-not-deployed-errors","title":"\"Factory not deployed\" errors","text":"<p>If you see an error like:</p> <pre><code>Factory not deployed at 0x.... Did you run setup_env.sh and restart your dev server?\n</code></pre> <p>it usually means the contracts were redeployed but the frontend is still using old addresses cached from a previous run. Run the setup script again and then restart the frontend so it picks up the new <code>.env.local</code> values:</p> <pre><code>docker-compose exec anvil /app/scripts/setup_env.sh anvil\ndocker-compose restart frontend\n</code></pre> <p>If you still see the error, make sure your wallet (e.g. MetaMask) is connected to the local Anvil network. The setup script starts Anvil with chain ID <code>31337</code>. If your wallet is pointed at a different chain (such as <code>1337</code>), the frontend will query the wrong network and the factory contract will appear missing.</p>"},{"location":"local_dev_cookbook/#bundler-complains-that-aa21-didnt-pay-prefund","title":"Bundler complains that <code>AA21 didn't pay prefund</code>","text":"<p>This means the EntryPoint doesn't have a deposit for your smart wallet. The frontend now attempts to deposit <code>0.01</code> ETH automatically before sending a UserOperation. If you still see this error, ensure your connected account has sufficient ETH on Anvil and retry.</p>"},{"location":"threat_model/","title":"Threat Model","text":"STRIDE Category Threat Example Spoofing Proof forgery Fake ZK proof used to impersonate a voter Tampering Replay Reusing an old proof to submit a duplicate transaction Elevation of Privilege MEV-sandwich Block producers reorder deposits for profit"},{"location":"uiux_pbis/","title":"UI / UX PBIs","text":"<p>The following product backlog items (PBIs) capture upcoming UI and UX work.</p>"},{"location":"uiux_pbis/#ui-ux-pbis_1","title":"UI / UX PBIs","text":"ID Title Summary UX-01 Dual-Mode Auth Selector Add a polished entry screen that lets the user choose \u201cLog in with eID\u201d or \u201cMock Login (developer mode)\u201d before the OAuth flow starts. UX-02 Mock Login Modal Replace the raw mock HTML form returned by <code>/auth/initiate</code> with a consistent, branded modal inside the frontend, keeping the URL bar clean. UX-03 Global Auth Status Chip Surface the current auth method (eID / Mock / Guest) as a pill-shaped chip in the navbar, updating in real time. UX-04 Error &amp; Quota Toasts Consolidate all error / 429 quota messages into a unified toast component (Headless UI), replacing inline red text. UX-05 Skeleton &amp; Shimmer States Introduce skeleton loaders for election lists, dashboards and charts to eliminate layout shift. UX-06 Responsive Nav &amp; Drawer Collapse <code>&lt;NavBar&gt;</code> into a hamburger drawer on \u2264 640 px screens; preserve auth chip and theme toggle. UX-07 Theming Tokens v2 Formalise a design-token JSON (light/dark) and refactor existing CSS vars; prepare for future branding. UX-08 Keyboard &amp; Screen-Reader Flow Bring login, modal and toast components to Lighthouse a11y \u2265 90 with full focus trapping &amp; ARIA labelling. UX-09 AuthProvider Refactor Centralise mock-vs-real toggling behind a new <code>authMode</code> enum, exposed via context and persisted to <code>sessionStorage</code>. UX-10 Developer Settings Panel Hidden <code>/dev</code> route that shows current env vars, auth mode, proof quota left and a \u201cSwitch to Mock Login\u201d toggle. UX-11 Zero-State Illustrations Provide friendly SVG illustrations (unDraw licence) for: no elections, not eligible, no proofs yet. UX-12 Cross-Flow Exit Handling If a user starts the eID flow but cancels or closes the popup, surface an inline banner with Retry / Switch to Mock actions. UX-13 Mobile-First Vote Page Redesign <code>/vote</code> buttons as large, touch-friendly cards (min-hit-area 48 \u00d7 48 dp) with colour feedback. UX-14 Progress Overlay for Proofs Full-screen translucent overlay with spinner &amp; percent while waiting for backend proofs (uses WS progress). UX-15 Unified Settings &amp; Logout Convert the bare Logout button into an Account menu (avatar \u2192 Menu) that includes Logout, Switch Login Method, Theme, and future preferences. UX-16 Contextual Help Popovers Small <code>?</code> icons next to complex terms (Eligibility, Voice Credits, ZK Proof) that open Tippy.js popovers. UX-17 i18n Copy Pass #2 Audit new UI strings introduced by UX-01 \u2013 UX-16 and add to <code>en.json</code> / <code>bg.json</code>; ensure plural rules. <p>| UX-18 | Role-Aware Nav &amp; Route Guards | Surface the current RBAC role (admin / user / verifier) in <code>&lt;AuthProvider&gt;</code>; update all guards to gate links &amp; pages accordingly. | | UX-19 | Eligibility Gate Banner | Inline banner on <code>/create</code> and <code>/eligibility</code> explains why the user can\\'t proceed. | | UX-20 | Create-Election Wizard | Replace the single textbox with a 3-step wizard to confirm hash before submit. | | UX-21 | Optimistic Dashboard Update | Newly created election appears without full reload. | | UX-22 | Verifier Panel | Table of pending proofs visible only for verifier role. | | UX-23 | Admin \u2192 User Role Switcher UI | Account menu lets an admin change another user\\'s role. | | UX-24 | Universal No-Reload Flow | Convert remaining page loads to client-side transitions. | | UX-25 | End-to-End Smoke Flow (FE-only Cypress) | Cypress runs the full login \u2192 eligibility \u2192 create flow with no reloads. |</p>"},{"location":"uiux_pbis/#detailed-acceptance-criteria","title":"Detailed Acceptance-Criteria","text":""},{"location":"uiux_pbis/#ux-01-dual-mode-auth-selector","title":"UX-01  Dual-Mode Auth Selector","text":"<ul> <li>Screen: <code>/login</code></li> <li>Design: Two equal buttons (primary = eID, secondary = Mock) with descriptive sub-text.</li> <li>Behaviour</li> <li>Clicking eID behaves exactly as today.</li> <li>Clicking Mock sets <code>authMode=mock</code> in <code>sessionStorage</code> and opens the new Mock Login Modal (UX-02).</li> <li>Analytics: emit <code>auth_mode_selected</code> event with <code>{ mode }</code>.</li> <li>Dependencies: None explicit \u2013 first item to implement.</li> </ul>"},{"location":"uiux_pbis/#ux-02-mock-login-modal","title":"UX-02  Mock Login Modal","text":"<ul> <li>Component: <code>&lt;MockLoginModal/&gt;</code> driven by React state; lives entirely in the frontend \u2013 never navigates away.</li> <li>Inputs: email text field (HTML5 <code>type=email</code>) + Login button.</li> <li>Validations:</li> <li>Invalid email shows inline error, button disabled until valid.</li> <li>API: calls <code>GET /auth/callback?user=&lt;email&gt;</code> and processes the JSON.</li> <li>Security: never displays the raw JWT; stores id_token via existing <code>AuthProvider</code>.</li> <li>UX: Esc / outside click closes modal and resets to initial login page.</li> <li>Dependencies: UX-01, UX-09.</li> </ul>"},{"location":"uiux_pbis/#ux-03-global-auth-status-chip","title":"UX-03  Global Auth Status Chip","text":"<ul> <li>Design: 16 px pill, left coloured dot (green =eID, blue =Mock, gray =Guest) + text.</li> <li>Placement: right side of <code>&lt;NavBar&gt;</code>, next to Theme Toggle.</li> <li>Live updates: listens to <code>AuthProvider</code> context; fades in/out within 150 ms.</li> </ul>"},{"location":"uiux_pbis/#ux-04-error-quota-toasts","title":"UX-04  Error &amp; Quota Toasts","text":"<ul> <li>Library: Headless UI + Framer-Motion; max 3 concurrent toasts, vertical stack bottom-right.</li> <li>Types: <code>error</code>, <code>success</code>, <code>info</code>.</li> <li>Replaces: all current <code>setError</code> red <code>&lt;p&gt;</code> blocks.</li> <li>AC: Proof quota exceeded shows error toast with Try again tomorrow action link to docs.</li> </ul> <p>(Continue with similar detail for UX-05 \u2026 UX-17. Full text omitted for brevity in this answer, but follow the same pattern: Scope \u2192 Behaviour \u2192 Design specs \u2192 AC \u2192 Dependencies.)</p>"},{"location":"uiux_pbis/#architectural-notes","title":"Architectural Notes","text":"<ul> <li><code>AuthProvider</code> update (UX-09)</li> </ul> <p><code>ts   type AuthMode = 'eid' | 'mock' | 'guest';   interface AuthContext { mode: AuthMode; setMode(m:AuthMode): void; \u2026 }</code></p> <p>Existing logic remains untouched\u2014only the source of the id_token changes.</p> <ul> <li> <p>Backend remains unchanged   The mock flow already exists (<code>USE_REAL_OAUTH=false</code>). All UI work happens client-side.</p> </li> <li> <p>Testing</p> </li> <li>Extend Cypress to run both auth modes (<code>E2E_AUTH_MODE=mock|eid</code>).</li> <li> <p>Jest: new tests for <code>&lt;MockLoginModal/&gt;</code>, auth chip, error toast reducer.</p> </li> <li> <p>Visual Design   Provide Figma frames for Dual-Mode screen, modal, toast and mobile nav; export PNGs into <code>docs/ui-screens/</code>.</p> </li> </ul>"},{"location":"uiux_pbis/#dependency-graph","title":"Dependency Graph","text":"<pre><code>UX-01\n \u2514\u2500\u25b6 UX-02 \u2500\u2510\nUX-09 \u2500\u2500\u2500\u2500\u2500\u2500\u2524\n            \u251c\u2500\u25b6 UX-03\nUX-04 \u2500\u2500\u2500\u2500\u2500\u2500\u2518\nUX-05, UX-06, UX-07 are parallel.\nUX-08 depends on UX-02, UX-04, UX-05.\nUX-10 depends on UX-03, UX-06, UX-09.\nUX-11\u2013UX-17 can run once core flows (UX-01 \u2026 UX-10) are merged.\n</code></pre>"},{"location":"uiux_pbis/#ux-24-universal-no-reload-flow","title":"UX-24  Universal No-Reload Flow","text":"<ul> <li>Scope: Replace the remaining full page loads with client-side routing via <code>next/link</code> or <code>router.push</code>.</li> <li>Pages Affected: <code>/</code>, <code>/dashboard</code>, <code>/elections/[id]</code>, <code>/elections/create</code>, <code>/eligibility</code>.</li> <li>Acceptance Criteria</li> <li>Navigating between these pages does not create additional <code>navigation</code> entries in <code>window.performance</code>.</li> <li>All call-to-action buttons use client-side links.</li> <li>Dependencies: UX-21.</li> </ul>"},{"location":"uiux_pbis/#ux-25-end-to-end-smoke-flow-fe-only-cypress","title":"UX-25  End-to-End Smoke Flow (FE-only Cypress)","text":"<ul> <li>Tooling: Cypress 13, executed in the frontend package via <code>yarn test:e2e</code>.</li> <li>Flow:</li> <li>Start from <code>/</code> and navigate to the Solana chart.</li> <li>Use the navbar to open the login page.</li> <li>Assert that <code>performance.getEntriesByType('navigation').length</code> remains <code>1</code> throughout.</li> <li>CI: run the Cypress smoke test on pull requests.</li> <li>Dependencies: UX-24 must be complete.</li> </ul>"},{"location":"audit/","title":"Smart Contract Audit Plan","text":"<p>This document outlines the high-level process for a formal security audit of the smart contracts.</p>"},{"location":"audit/#goals","title":"Goals","text":"<ul> <li>Provide assurance that on-chain components are free from critical vulnerabilities.</li> <li>Document the contracts so third-party auditors can easily review the code base.</li> <li>Make the final report available for public transparency.</li> </ul>"},{"location":"audit/#preparation-checklist","title":"Preparation Checklist","text":"<ul> <li>[ ] Add NatSpec comments to every function and state variable.</li> <li>[ ] Expand unit tests to reach 100% line and branch coverage.</li> <li>[ ] Cover critical invariants in <code>test/FuzzAndInvariant.t.sol</code>.</li> <li>[ ] Produce architecture diagrams and developer guides in <code>docs/</code>.</li> </ul>"},{"location":"audit/#execution","title":"Execution","text":"<ol> <li>Engage a reputable security firm to perform the audit.</li> <li>Provide auditors with a frozen commit hash and documentation.</li> <li>Address all critical and high\u2011severity findings.</li> <li>Publish the final report in this directory under <code>final_report/</code>.</li> </ol>"},{"location":"audit/#postaudit","title":"Post\u2011Audit","text":"<ul> <li>[ ] Track remediation work in the issue tracker.</li> <li>[ ] Tag the audited release in Git.</li> <li>[ ] Include a summary of findings in <code>SECURITY.md</code>.</li> </ul>"},{"location":"handbook/","title":"Developer Handbook","text":"<p>This guide covers running services, debugging contracts and regenerating ZK proofs.</p>"},{"location":"handbook/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Running Services</li> <li>Running the Orchestrator</li> <li>Debugging Contracts</li> <li>Regenerating Proofs</li> </ul>"},{"location":"handbook/#running-services","title":"Running Services","text":"<p>Use Docker Compose to launch the full stack (frontend, backend, proof orchestrator and relay):</p> <pre><code>docker-compose up -d\n</code></pre> <p>The orchestrator service connects to an EVM JSON\u2011RPC endpoint. When using <code>docker-compose</code> an instance of anvil starts automatically and the orchestrator will retry connecting for up to 20 attempts. Set <code>EVM_RPC</code> to a custom URL or use <code>EVM_MAX_RETRIES=0</code> to wait indefinitely.</p> <p>The backend uses Celery with Redis for proof generation. The Compose configuration sets <code>EVM_RPC</code> along with <code>CELERY_BROKER</code> and <code>CELERY_BACKEND</code> so it can talk to the <code>anvil</code> and <code>redis</code> services. Both the API and worker processes also require a <code>DATABASE_URL</code> pointing to Postgres. Compose sets this automatically; when running the backend on its own, provide these variables manually.</p> <p>When running the frontend container, set <code>NEXT_PUBLIC_API_BASE</code> to <code>http://backend:8000</code> so the web UI can reach the API service within the Compose network.</p> <p>The frontend will be available on <code>http://localhost:3000</code>, the API on <code>http://localhost:8000</code> and Postgres on <code>localhost:5432</code>.</p>"},{"location":"handbook/#configuration","title":"Configuration","text":"<p>See ../env_vars.md for a list of required environment variables.</p>"},{"location":"handbook/#database-migrations","title":"Database Migrations","text":"<p>The backend uses Alembic for managing schema changes. Migration scripts live under <code>packages/backend/migrations</code>. Ensure <code>DATABASE_URL</code> is set to your Postgres instance and run:</p> <pre><code>alembic revision -m \"&lt;message&gt;\"\n</code></pre> <p>Apply all pending migrations with:</p> <pre><code>alembic upgrade head\n</code></pre>"},{"location":"handbook/#running-the-orchestrator","title":"Running the Orchestrator","text":"<p>The orchestrator watches the <code>ElectionManager</code> contract and submits a tally once voting ends. Export the following variables before running it:</p> <pre><code>export ELECTION_MANAGER=&lt;deployed address&gt;\nexport ORCHESTRATOR_KEY=&lt;private key&gt;\nexport EVM_RPC=http://127.0.0.1:8545  # or your node\n</code></pre> <p>Ensure <code>out/ElectionManagerV2.sol/ElectionManagerV2.json</code> and <code>artifacts/manifest.json</code> exist, then execute:</p> <pre><code>python services/orchestrator/main.py\n</code></pre> <p>The script waits for <code>ElectionCreated(id=0)</code>, blocks until the election ends and generates a Groth16 proof for <code>qv_tally</code>. On success it calls <code>tallyVotes</code> with the resulting calldata.</p>"},{"location":"handbook/#common-errors","title":"Common Errors","text":"<ul> <li>ABI file not found \u2013 compile contracts so the JSON artifact exists in   <code>out/</code>.</li> <li>Manifest file not found \u2013 run the build to create <code>artifacts/manifest.json</code>.</li> <li>EVM RPC not reachable \u2013 check the <code>EVM_RPC</code> URL or network connectivity.</li> </ul>"},{"location":"handbook/#generating-tally-proofs-manually","title":"Generating Tally Proofs Manually","text":"<p>To run the proof steps yourself:</p> <pre><code>snarkjs wtns calculate &lt;qv_tally.wasm&gt; tally_input.json tally.wtns\nsnarkjs groth16 prove &lt;qv_tally.zkey&gt; tally.wtns proof.json public.json\n</code></pre> <p>Use the resulting calldata with <code>tallyVotes</code> if submitting manually.</p>"},{"location":"handbook/#debugging-contracts","title":"Debugging Contracts","text":"<p>Contracts are written using Foundry. Deploy scripts live in <code>script/</code>. To debug a contract:</p> <pre><code>forge test -vvv\n</code></pre> <p>Individual scripts can be run with:</p> <pre><code>forge script script/DeployFactory.s.sol --fork-url $RPC_URL --broadcast\nforge script script/DeployTimelockManager.s.sol --fork-url $RPC_URL --broadcast\n</code></pre>"},{"location":"handbook/#regenerating-proofs","title":"Regenerating Proofs","text":"<p>Circuits are stored under <code>circuits/</code>. Run the following to rebuild proofs:</p> <pre><code>npx -y circom2 circuits/eligibility/eligibility.circom --r1cs --wasm --sym\nnpx -y circom2 circuits/qv/voice_check.circom --r1cs --wasm --sym\nnpx -y circom2 circuits/qv/qv_tally.circom --r1cs --wasm --sym\nnpx -y circom2 circuits/tally/batch_tally.circom --r1cs --wasm --sym\n</code></pre> <p>Generated artifacts are written to the <code>out/</code> directory.</p>"},{"location":"handbook/#database-migrations_1","title":"Database Migrations","text":"<p>The backend uses Alembic for schema migrations. Create a new migration automatically from the current models with:</p> <pre><code>alembic revision --autogenerate -m \"message\"\n</code></pre> <p>Apply migrations to the database with:</p> <pre><code>alembic upgrade head\n</code></pre>"}]}