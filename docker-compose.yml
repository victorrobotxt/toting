# docker-compose.yml

services:
  # ----------------------------------------
  # Anvil (Foundry local blockchain)
  # ----------------------------------------
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    user: "0"
    environment:
      - FOUNDRY_DISABLE_NIGHTLY_WARNING=1
      - ANVIL_IP_ADDR=0.0.0.0
    command: >
      anvil
      --port 8545
      --chain-id 31337
      --gas-limit 30000000
      --gas-price 0
      # --- FIX: Persist the chain state to a volume ---
      --state /data/anvil_state.json
      --state-interval 5
    ports:
      - "8545:8545"
    healthcheck:
      test: ["CMD-SHELL", "cast chain-id --rpc-url http://127.0.0.1:8545"]
      start_period: 20s
      interval: 5s
      timeout: 5s
      retries: 12
    volumes:
      - .:/app
      # --- FIX: Mount a named volume to persist the state ---
      - anvil_state:/data
    working_dir: /app
    dns:
      - 8.8.8.8
  
  # (The rest of your docker-compose.yml remains the same)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 2s
      retries: 10
    dns:
      - 8.8.8.8

  setup:
    image: ghcr.io/foundry-rs/foundry:latest
    user: "0"
    command: ["/app/scripts/setup_env.sh"]
    working_dir: /app
    volumes:
      - .:/app
    environment:
      ORCHESTRATOR_KEY: ${ORCHESTRATOR_KEY}
    dns:
      - 8.8.8.8
    depends_on:
      anvil: { condition: service_healthy }

  solana:
    image: solanalabs/solana:v1.18.3
    command: ["solana-test-validator", "--quiet"]
    ports:
      - "8899:8899"
    dns:
      - 8.8.8.8

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    volumes:
      - .:/app
    env_file:
      - .env.deployed
    environment:
      # contract & OAuth config (non‐chain specific)
      GRAO_BASE_URL: ${GRAO_BASE_URL}
      GRAO_CLIENT_ID: ${GRAO_CLIENT_ID}
      GRAO_CLIENT_SECRET: ${GRAO_CLIENT_SECRET}
      JWT_SECRET: ${JWT_SECRET}
      GRAO_REDIRECT_URI: ${GRAO_REDIRECT_URI}
      USE_REAL_OAUTH: ${USE_REAL_OAUTH}

      # EVM settings (hardcoded for inter-service communication)
      EVM_RPC: http://anvil:8545
      CHAIN_ID: 31337
      ORCHESTRATOR_KEY: ${ORCHESTRATOR_KEY}

      # Celery & Database
      CELERY_BROKER: redis://redis:6379/0
      CELERY_BACKEND: redis://redis:6379/0
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
    ports:
      - "8000:8000"
    dns:
      - 8.8.8.8
    command: >
      sh -c "
        echo 'Backend waiting for contract artifact...' &&
        until [ -f /app/out/ElectionManagerV2.sol/ElectionManagerV2.json ]; do sleep 1; done &&
        echo 'Backend found artifact. Starting server.' &&
        python -m uvicorn packages.backend.main:app --host 0.0.0.0 --port 8000 --reload --reload-dir /app/packages/backend --reload-exclude .*/\.venv/.*"
    depends_on:
      setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    volumes:
      - .:/app
    env_file:
      - .env.deployed
    environment:
      # EVM settings (hardcoded for inter-service communication)
      EVM_RPC: http://anvil:8545
      CHAIN_ID: 31337
      ORCHESTRATOR_KEY: ${ORCHESTRATOR_KEY}
      
      # Celery & Database
      CELERY_BROKER: redis://redis:6379/0
      CELERY_BACKEND: redis://redis:6379/0
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
    dns:
      - 8.8.8.8
    depends_on:
      setup:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    env_file:
      - .env.deployed
    environment:
      NEXT_PUBLIC_API_BASE: http://localhost:8000
      NEXT_PUBLIC_BUNDLER_URL: http://localhost:3001/rpc
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - frontend_node_modules:/app/packages/frontend/node_modules
    working_dir: /app/packages/frontend
    command: >
      sh -c "
        echo 'Waiting for contract artifact...' &&
        until [ -f /app/out/ElectionManagerV2.sol/ElectionManagerV2.json ]; do sleep 1; done &&
        echo 'Found artifact. Copying ABI...' &&
        mkdir -p src/contracts &&
        cp /app/out/ElectionManagerV2.sol/ElectionManagerV2.json ./src/contracts/ElectionManagerV2.json &&
        echo 'ABI copied. Starting Next.js development server...' &&
        yarn dev
      "
    depends_on:
      backend:
        condition: service_started
      setup:
        condition: service_completed_successfully


  bundler:
    image: ghcr.io/5afe/erc4337-bundlers-eth-infinitism-bundler:latest
    working_dir: /opt/bundler/packages/bundler
    volumes:
      - .:/app 
      - ./mnemonic.txt:/mnt/mnemonic.txt:ro
    command:
      - npx
      - ts-node
      - ./src/exec.ts
      - --config
      - /app/bundler.config.json
      - --unsafe
    ports:
      - "3001:3001"
    depends_on:
      anvil:
        condition: service_healthy
      setup:
        condition: service_completed_successfully

  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
      target: orchestrator
    volumes:
      - .:/app
    env_file:
      - .env.deployed
    environment:
      EVM_RPC: http://anvil:8545
      EVM_MAX_RETRIES: "0"
      ORCHESTRATOR_KEY: ${ORCHESTRATOR_KEY}
    dns:
      - 8.8.8.8
    command: >
      sh -c "
        echo 'Orchestrator waiting for contract artifact...' &&
        until [ -f /app/out/ElectionManagerV2.sol/ElectionManagerV2.json ]; do sleep 1; done &&
        echo 'Orchestrator found artifact. Starting process.' &&
        python /app/services/orchestrator/main.py
      "
    depends_on:
      anvil:
        condition: service_healthy
      setup:
        condition: service_completed_successfully

  relay:
    build:
      context: .
      dockerfile: services/relay-daemon/Dockerfile
    restart: always
    env_file:
      - .env.deployed
    environment:
      EVM_RPC: http://anvil:8545
      SOLANA_RPC: http://solana:8899
      POSTGRES_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
      SOLANA_BRIDGE_SK: ${SOLANA_BRIDGE_SK}
    ports:
      - "9300:9300"
    dns:
      - 8.8.8.8
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9300/metrics || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    depends_on:
      setup:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      solana:
        condition: service_started
      anvil: { condition: service_healthy }

volumes:
  frontend_node_modules:
  anvil_state: