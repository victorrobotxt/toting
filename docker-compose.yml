services:
  # ----------------------------------------
  # Anvil (Foundry local blockchain)
  # ----------------------------------------
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    user: "0"
    # CHANGE: Switched from a list to a multi-line string for the command.
    # This is more robust and avoids parsing issues.
    command: >
      anvil
      --host 0.0.0.0
      --port 8545
      --chain-id 31337
      --base-fee 1000000000
      --gas-limit 30000000
    ports:
      - "8545:8545"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -sf -H 'Content-Type: application/json' \
             -d '{\"jsonrpc\":\"2.0\",\"method\":\"eth_chainId\",\"params\":[],\"id\":1}' \
             http://localhost:8545 \
           | grep -q '\"result\"'"
        ]
      interval: 5s
      timeout: 3s
      retries: 3
  
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_PASSWORD: pass
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 2s
      retries: 10

  solana:
    image: solanalabs/solana:v1.18.3
    command: ["solana-test-validator", "--quiet"]
    ports:
      - "8899:8899"

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    environment:
      GRAO_BASE_URL: ${GRAO_BASE_URL:-https://demo-oauth.example}
      GRAO_CLIENT_ID: ${GRAO_CLIENT_ID:-test-client}
      GRAO_CLIENT_SECRET: ${GRAO_CLIENT_SECRET:-test-secret}
      GRAO_REDIRECT_URI: ${GRAO_REDIRECT_URI:-http://localhost:3000/callback}
      USE_REAL_OAUTH: ${USE_REAL_OAUTH:-false}
      EVM_RPC: http://anvil:8545
      CELERY_BROKER: redis://redis:6379/0
      CELERY_BACKEND: redis://redis:6379/0
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - db

  worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    command: celery -A packages.backend.proof.celery_app worker --loglevel=info
    environment:
      CELERY_BROKER: redis://redis:6379/0
      CELERY_BACKEND: redis://redis:6379/0
      DATABASE_URL: postgres://postgres:pass@db:5432/postgres
    depends_on:
      - redis
      - db

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    environment:
      NEXT_PUBLIC_API_BASE: http://backend:8000
      NEXT_PUBLIC_ENTRYPOINT: ${NEXT_PUBLIC_ENTRYPOINT:-0xYourEntryPointAddress}
      NEXT_PUBLIC_WALLET_FACTORY: ${NEXT_PUBLIC_WALLET_FACTORY:-0xYourFactoryAddress}
      NEXT_PUBLIC_ELECTION_MANAGER: ${NEXT_PUBLIC_ELECTION_MANAGER:-0x5FbDB2315678afecb367f032d93F642f64180aa3}
      NEXT_PUBLIC_BUNDLER_URL: ${NEXT_PUBLIC_BUNDLER_URL:-http://localhost:3001}
    ports:
      - "3000:3000"
    depends_on:
      - backend

  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      EVM_RPC: http://anvil:8545
      EVM_MAX_RETRIES: "0"
      ELECTION_MANAGER: ${ELECTION_MANAGER:-0x0000000000000000000000000000000000000000}
      ORCHESTRATOR_KEY: ${ORCHESTRATOR_KEY:-0x0000000000000000000100000000000000000000000000000000000000000000}
    volumes:
      - ./circuits:/app/circuits
    depends_on:
      - anvil

  relay:
    build:
      context: .
      dockerfile: services/relay-daemon/Dockerfile
    restart: always
    environment:
      EVM_RPC: http://anvil:8545
      SOLANA_RPC: http://solana:8899
      POSTGRES_URL: postgres://postgres:pass@db:5432/postgres
      ELECTION_MANAGER: ${ELECTION_MANAGER:-0x0000000000000000000000000000000000000000}
      SOLANA_BRIDGE_SK: ${SOLANA_BRIDGE_SK:-[]}
    ports:
      - "9300:9300"
    depends_on:
      db:
        condition: service_healthy
      anvil:
        condition: service_started
      solana:
        condition: service_started
